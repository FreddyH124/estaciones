Index: src/main/java/org/arso/services/ServicioEstaciones.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.services;\r\n\r\nimport org.arso.communication.retrofit.EstacionesRestClient;\r\nimport org.arso.communication.retrofit.estaciones.model.EstacionarBicicletaDTO;\r\nimport org.arso.interfaces.services.IServicioEstaciones;\r\nimport org.arso.model.Bicicleta;\r\n\r\nimport retrofit2.Call;\r\nimport retrofit2.Response;\r\nimport retrofit2.Retrofit;\r\nimport retrofit2.converter.jackson.JacksonConverterFactory;\r\n\r\npublic class ServicioEstaciones implements IServicioEstaciones {\r\n    @Override\r\n    public void estacionarBicicleta(EstacionarBicicletaDTO estacionarBici) throws Exception{\r\n        \r\n    \tRetrofit retrofit = new Retrofit.Builder().baseUrl(\"http://localhost:8080\")\r\n\t\t\t\t.addConverterFactory(JacksonConverterFactory.create()).build();\r\n\r\n\t\tEstacionesRestClient service = retrofit.create(EstacionesRestClient.class);\r\n\t\t\r\n\t\tCall<Void> call = service.estacionarBicicleta(estacionarBici);\r\n\r\n\t\tResponse<Void> response = call.execute();\r\n\t\t\r\n\t\tif(!response.isSuccessful() || (response.body() == null)) {\r\n\t\t\tthrow new Exception(\"No se ha podido estacionar la bicicleta\");\r\n\t\t}\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/services/ServicioEstaciones.java b/src/main/java/org/arso/services/ServicioEstaciones.java
--- a/src/main/java/org/arso/services/ServicioEstaciones.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/services/ServicioEstaciones.java	(date 1715157505789)
@@ -2,8 +2,7 @@
 
 import org.arso.communication.retrofit.EstacionesRestClient;
 import org.arso.communication.retrofit.estaciones.model.EstacionarBicicletaDTO;
-import org.arso.interfaces.services.IServicioEstaciones;
-import org.arso.model.Bicicleta;
+import org.arso.interfaces.IServicioEstaciones;
 
 import retrofit2.Call;
 import retrofit2.Response;
Index: src/main/java/org/arso/interfaces/services/IServicioEstaciones.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/interfaces/services/IServicioEstaciones.java b/src/main/java/org/arso/interfaces/IServicioEstaciones.java
rename from src/main/java/org/arso/interfaces/services/IServicioEstaciones.java
rename to src/main/java/org/arso/interfaces/IServicioEstaciones.java
--- a/src/main/java/org/arso/interfaces/services/IServicioEstaciones.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/interfaces/IServicioEstaciones.java	(date 1715157505702)
@@ -1,9 +1,8 @@
-package org.arso.interfaces.services;
+package org.arso.interfaces;
 
 import java.io.IOException;
 
 import org.arso.communication.retrofit.estaciones.model.EstacionarBicicletaDTO;
-import org.arso.model.Bicicleta;
 import org.arso.services.ServicioAlquileresException;
 
 public interface IServicioEstaciones {
Index: src/main/java/org/arso/model/Usuario.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.model;\r\n\r\nimport org.arso.interfaces.IEntidadParseable;\r\nimport org.arso.interfaces.IIdentificable;\r\nimport org.arso.persistence.jpa.AlquilerEntidad;\r\nimport org.arso.persistence.jpa.ReservaEntidad;\r\nimport org.arso.persistence.jpa.UsuarioEntidad;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic class Usuario implements IIdentificable, IEntidadParseable<UsuarioEntidad> {\r\n    private String id;\r\n    private List<Reserva> reservas;\r\n    private List<Alquiler> alquileres;\r\n\r\n    public Usuario(){\r\n        reservas = new ArrayList<>();\r\n        alquileres = new ArrayList<>();\r\n    }\r\n\r\n    @Override\r\n    public String getId() {\r\n        return id;\r\n    }\r\n\r\n    @Override\r\n    public void setId(String id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public List<Reserva> getReservas() {\r\n        return reservas;\r\n    }\r\n\r\n    public void addReserva(Reserva reserva){ reservas.add(reserva);}\r\n\r\n    public void removeReserva(Reserva reserva) { reservas.remove(reserva); }\r\n\r\n    public void setReservas(List<Reserva> reservas) {\r\n        this.reservas = reservas;\r\n    }\r\n\r\n    public List<Alquiler> getAlquileres() {\r\n        return alquileres;\r\n    }\r\n\r\n    public void addAlquiler(Alquiler alquiler) { alquileres.add(alquiler); }\r\n\r\n    public void removeAlquiler(Alquiler alquiler) { alquileres.remove(alquiler); }\r\n\r\n    public void setAlquileres(List<Alquiler> alquileres) {\r\n        this.alquileres = alquileres;\r\n    }\r\n\r\n    public long getReservasCaducadas(){\r\n        return reservas.stream()\r\n                .filter(Reserva::isCaducada)\r\n                .count();\r\n    }\r\n\r\n    public long getTiempoUsoHoy(){\r\n        return alquileres.stream()\r\n                .filter(alquiler -> alquiler.getInicio().equals(LocalDateTime.now()))\r\n                .mapToLong(Alquiler::getTiempoAlquiler)\r\n                .sum();\r\n    }\r\n\r\n    public long getTiempoUsoSemanal(){\r\n        LocalDateTime haceUnaSemana = LocalDateTime.now().minusDays(6);\r\n        LocalDateTime manana = LocalDateTime.now().plusDays(1);\r\n        return alquileres.stream()\r\n                .filter(alquiler -> alquiler.getInicio().isAfter(haceUnaSemana) && alquiler.getInicio().isBefore(manana))\r\n                .mapToLong(Alquiler::getTiempoAlquiler)\r\n                .sum();\r\n    }\r\n\r\n    public boolean superaTiempoUso(){\r\n        return getTiempoUsoHoy() >= 60 || getTiempoUsoSemanal() >= 180;\r\n    }\r\n\r\n    public Reserva getReservaActiva(){\r\n        Optional<Reserva> ultima = reservas.stream()\r\n                .filter(Reserva::isActiva)\r\n                .max(Comparator.comparing(Reserva::getCreada));\r\n\r\n        return ultima.orElse(null);\r\n    }\r\n\r\n    public Alquiler getAlquilerActivo(){\r\n        Optional<Alquiler> ultimo = alquileres.stream()\r\n                .filter(Alquiler::isActivo)\r\n                .max(Comparator.comparing(Alquiler::getInicio));\r\n\r\n        return ultimo.orElse(null);\r\n    }\r\n\r\n    public boolean isBloqueado(){\r\n        long count = reservas.stream()\r\n                .filter(Reserva::isCaducada)\r\n                .count();\r\n\r\n        return count >= 3;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Usuario{\" +\r\n                \"id='\" + id + '\\'' +\r\n                \", reservas=\" + reservas +\r\n                \", alquileres=\" + alquileres +\r\n                '}';\r\n    }\r\n\r\n\r\n    @Override\r\n    public UsuarioEntidad toEntidad() {\r\n        UsuarioEntidad usuarioEntidad = new UsuarioEntidad();\r\n        usuarioEntidad.setId(this.id);\r\n\r\n        List<ReservaEntidad> reservasEntidad = new ArrayList<>();\r\n        for(Reserva reserva : reservas){\r\n            reservasEntidad.add(reserva.toEntidad());\r\n        }\r\n        usuarioEntidad.setReservas(reservasEntidad);\r\n\r\n        List<AlquilerEntidad> alquileresEntidad = new ArrayList<>();\r\n        for(Alquiler alquiler : alquileres){\r\n            alquileresEntidad.add(alquiler.toEntidad());\r\n        }\r\n        usuarioEntidad.setAlquileres(alquileresEntidad);\r\n\r\n        return usuarioEntidad;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/model/Usuario.java b/src/main/java/org/arso/model/Usuario.java
--- a/src/main/java/org/arso/model/Usuario.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/model/Usuario.java	(date 1715162333918)
@@ -6,6 +6,7 @@
 import org.arso.persistence.jpa.ReservaEntidad;
 import org.arso.persistence.jpa.UsuarioEntidad;
 
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -64,7 +65,7 @@
 
     public long getTiempoUsoHoy(){
         return alquileres.stream()
-                .filter(alquiler -> alquiler.getInicio().equals(LocalDateTime.now()))
+                .filter(alquiler -> alquiler.getInicio().toLocalDate().equals(LocalDate.now()))
                 .mapToLong(Alquiler::getTiempoAlquiler)
                 .sum();
     }
Index: src/main/java/org/arso/rest/ControladorRest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.rest;\r\n\r\nimport javax.annotation.security.RolesAllowed;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.ws.rs.Consumes;\r\nimport javax.ws.rs.GET;\r\nimport javax.ws.rs.PATCH;\r\nimport javax.ws.rs.POST;\r\nimport javax.ws.rs.PUT;\r\nimport javax.ws.rs.Path;\r\nimport javax.ws.rs.PathParam;\r\nimport javax.ws.rs.Produces;\r\nimport javax.ws.rs.core.Context;\r\nimport javax.ws.rs.core.MediaType;\r\nimport javax.ws.rs.core.Response;\r\nimport javax.ws.rs.core.UriInfo;\r\n\r\nimport org.arso.factory.FactoriaServicios;\r\nimport org.arso.interfaces.services.IServicioAlquileres;\r\n\r\nimport io.jsonwebtoken.Claims;\r\n\r\n@Path(\"alquileres\")\r\npublic class ControladorRest {\r\n\t\r\n\tprivate IServicioAlquileres servicioAlquileres = FactoriaServicios.getServicio(IServicioAlquileres.class);\r\n\t\r\n\t@Context\r\n\tprivate UriInfo uriInfo;\r\n\t\r\n\t@Context\r\n\tprivate HttpServletRequest servletRequest;\r\n\t\r\n\t//Poner @PermitAll en el servicio de login\r\n\t//http://localhost:8080/api/alquileres/1\r\n\t\r\n\t@GET\r\n\t@Path(\"{id}\")\r\n\t@Produces(MediaType.APPLICATION_JSON)\r\n\t@RolesAllowed(\"administrador\")\r\n\tpublic Response getUsuario( @PathParam(\"id\") String id) throws Exception {\r\n\t\t\r\n\t\tif (this.servletRequest.getAttribute(\"claims\") != null) {\r\n\t\t\tClaims claims = (Claims) this.servletRequest.getAttribute(\"claims\");\r\n\t\t\tSystem.out.println(\"Usuario autenticado: \" + claims.getSubject());\r\n\t\t\tSystem.out.println(\"Roles: \" + claims.get(\"roles\"));\r\n\t\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tservicioAlquileres.getUsuario(id);\r\n\t\t} catch (IllegalArgumentException e) {\r\n\t\t\t\r\n\t\t\tResponse.status(Response.Status.BAD_REQUEST).build();\r\n\t\t}\r\n\t\treturn Response.status(Response.Status.OK).entity(servicioAlquileres.getUsuario(id)).build();\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t@POST\r\n\t@Path(\"{id}/reservas\")\r\n\tpublic Response reservarBicileta( @PathParam(\"id\") String id,\r\n\t\t\tString idBicicleta) throws Exception {\r\n\t\t\r\n\t\ttry {\r\n\t\t\tservicioAlquileres.reservarBicicleta(id, idBicicleta);\r\n\t\t} catch (IllegalArgumentException e) {\r\n\t\t\t\r\n\t\t\tResponse.status(Response.Status.BAD_REQUEST).build();\r\n\t\t}\r\n\t\treturn Response.status(Response.Status.NO_CONTENT).build();\r\n\t\t\r\n\t}\r\n\t\r\n\t@POST\r\n\t@Path(\"{id}/reservas\")\r\n\tpublic Response confirmarReserva(@PathParam(\"id\") String id) throws Exception {\r\n\t\ttry {\r\n\t\t\tservicioAlquileres.confirmarReserva(id);\r\n\t\t} catch (IllegalStateException e) {\r\n\t\t\tResponse.status(Response.Status.BAD_REQUEST).build();\r\n\t\t}\r\n\t\t\r\n\t\treturn Response.status(Response.Status.NO_CONTENT).build();\r\n\t}\r\n\t\r\n\t@POST\r\n\t@Path(\"{id}/reserva/alquileres\")\r\n\tpublic Response alquilarBicicleta(@PathParam(\"id\") String id,\r\n\t\tString idBicicleta) throws Exception {\r\n\t\ttry {\r\n\t\t\tservicioAlquileres.reservarBicicleta(id, idBicicleta);\r\n\t\t} catch (IllegalStateException e) {\r\n\t\t\tResponse.status(Response.Status.BAD_REQUEST).build();\r\n\t\t}\r\n\t\t\r\n\t\treturn Response.status(Response.Status.NO_CONTENT).build();\r\n\t}\r\n\t\r\n\t@POST\r\n\t@Path(\"{id}/alquiler-activo\")\r\n\tpublic Response dejarBicicleta(@PathParam(\"id\") String id,\r\n\t\tString idEstacion) throws Exception {\r\n\t\ttry {\r\n\t\t\tservicioAlquileres.dejarBicicleta(id, idEstacion);\r\n\t\t} catch (IllegalStateException e) {\r\n\t\t\tResponse.status(Response.Status.BAD_REQUEST).build();\r\n\t\t}\r\n\t\t\r\n\t\treturn Response.status(Response.Status.NO_CONTENT).build();\r\n\t}\r\n\t\r\n\t@PATCH\r\n\t@Path(\"{id}\")\r\n\tpublic Response liberarBloqueo(@PathParam(\"id\") String id) throws Exception {\r\n\t\ttry {\r\n\t\t\tservicioAlquileres.liberarBloqueo(id);\r\n\t\t} catch (IllegalStateException e) {\r\n\t\t\tResponse.status(Response.Status.BAD_REQUEST).build();\r\n\t\t}\r\n\t\treturn Response.status(Response.Status.NO_CONTENT).build();\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/rest/ControladorRest.java b/src/main/java/org/arso/rest/ControladorRest.java
--- a/src/main/java/org/arso/rest/ControladorRest.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/rest/ControladorRest.java	(date 1715162004443)
@@ -2,11 +2,9 @@
 
 import javax.annotation.security.RolesAllowed;
 import javax.servlet.http.HttpServletRequest;
-import javax.ws.rs.Consumes;
 import javax.ws.rs.GET;
 import javax.ws.rs.PATCH;
 import javax.ws.rs.POST;
-import javax.ws.rs.PUT;
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
 import javax.ws.rs.Produces;
@@ -16,9 +14,11 @@
 import javax.ws.rs.core.UriInfo;
 
 import org.arso.factory.FactoriaServicios;
-import org.arso.interfaces.services.IServicioAlquileres;
+import org.arso.interfaces.IServicioAlquileres;
 
 import io.jsonwebtoken.Claims;
+import org.arso.model.DTO.UsuarioResumenDTO;
+import org.arso.model.Usuario;
 
 @Path("alquileres")
 public class ControladorRest {
@@ -30,40 +30,16 @@
 	
 	@Context
 	private HttpServletRequest servletRequest;
-	
-	//Poner @PermitAll en el servicio de login
-	//http://localhost:8080/api/alquileres/1
-	
-	@GET
-	@Path("{id}")
-	@Produces(MediaType.APPLICATION_JSON)
-	@RolesAllowed("administrador")
-	public Response getUsuario( @PathParam("id") String id) throws Exception {
-		
-		if (this.servletRequest.getAttribute("claims") != null) {
-			Claims claims = (Claims) this.servletRequest.getAttribute("claims");
-			System.out.println("Usuario autenticado: " + claims.getSubject());
-			System.out.println("Roles: " + claims.get("roles"));
-			}
-		
-		try {
-			servicioAlquileres.getUsuario(id);
-		} catch (IllegalArgumentException e) {
-			
-			Response.status(Response.Status.BAD_REQUEST).build();
-		}
-		return Response.status(Response.Status.OK).entity(servicioAlquileres.getUsuario(id)).build();
-		
-		
-	}
-	
+
 	@POST
-	@Path("{id}/reservas")
-	public Response reservarBicileta( @PathParam("id") String id,
-			String idBicicleta) throws Exception {
+	@Path("bicicletas/{idUsuario}/reservar/{idBicicleta}")
+	@RolesAllowed("NORMAL")
+	public Response reservarBicileta( @PathParam("idUsuario") String idUsuario,
+									  @PathParam("idBicicleta") String idBicicleta) throws Exception {
 		
 		try {
-			servicioAlquileres.reservarBicicleta(id, idBicicleta);
+			servicioAlquileres.reservarBicicleta(idUsuario, idBicicleta);
+			return Response.status(Response.Status.CREATED).build();
 		} catch (IllegalArgumentException e) {
 			
 			Response.status(Response.Status.BAD_REQUEST).build();
@@ -73,10 +49,12 @@
 	}
 	
 	@POST
-	@Path("{id}/reservas")
-	public Response confirmarReserva(@PathParam("id") String id) throws Exception {
+	@Path("reservas/{idUsuario}/confirmar")
+	@RolesAllowed("NORMAL")
+	public Response confirmarReserva(@PathParam("idUsuario") String idUsuario) throws Exception {
 		try {
-			servicioAlquileres.confirmarReserva(id);
+			servicioAlquileres.confirmarReserva(idUsuario);
+			return Response.status(Response.Status.OK).build();
 		} catch (IllegalStateException e) {
 			Response.status(Response.Status.BAD_REQUEST).build();
 		}
@@ -85,11 +63,12 @@
 	}
 	
 	@POST
-	@Path("{id}/reserva/alquileres")
-	public Response alquilarBicicleta(@PathParam("id") String id,
-		String idBicicleta) throws Exception {
+	@Path("bicicletas/{idUsuario}/alquilar/{idBicicleta}")
+	@RolesAllowed("NORMAL")
+	public Response alquilarBicicleta(@PathParam("idUsuario") String idUsuario,
+									  @PathParam("idBicicleta") String idBicicleta) throws Exception {
 		try {
-			servicioAlquileres.reservarBicicleta(id, idBicicleta);
+			servicioAlquileres.reservarBicicleta(idUsuario, idBicicleta);
 		} catch (IllegalStateException e) {
 			Response.status(Response.Status.BAD_REQUEST).build();
 		}
@@ -98,11 +77,12 @@
 	}
 	
 	@POST
-	@Path("{id}/alquiler-activo")
-	public Response dejarBicicleta(@PathParam("id") String id,
-		String idEstacion) throws Exception {
+	@Path("activo/{idUsuario}/finalizar/{idEstacion}")
+	@RolesAllowed("NORMAL")
+	public Response dejarBicicleta(@PathParam("idUsuario") String idUsuario,
+								   @PathParam("idEstacion") String idEstacion) throws Exception {
 		try {
-			servicioAlquileres.dejarBicicleta(id, idEstacion);
+			servicioAlquileres.dejarBicicleta(idUsuario, idEstacion);
 		} catch (IllegalStateException e) {
 			Response.status(Response.Status.BAD_REQUEST).build();
 		}
@@ -111,17 +91,35 @@
 	}
 	
 	@PATCH
-	@Path("{id}")
-	public Response liberarBloqueo(@PathParam("id") String id) throws Exception {
+	@Path("usuarios/{idUsuario}/liberar")
+	@RolesAllowed("GESTOR")
+	public Response liberarBloqueo(@PathParam("idUsuario") String idUsuario) throws Exception {
 		try {
-			servicioAlquileres.liberarBloqueo(id);
+			servicioAlquileres.liberarBloqueo(idUsuario);
 		} catch (IllegalStateException e) {
 			Response.status(Response.Status.BAD_REQUEST).build();
 		}
 		return Response.status(Response.Status.NO_CONTENT).build();
 	}
-	
-	
+
+	@GET
+	@Path("usuarios/{idUsuario}/historial")
+	@Produces(MediaType.APPLICATION_JSON)
+	@RolesAllowed("NORMAL")
+	public Response getHistorialUsuario( @PathParam("idUsuario") String idUsuario) throws Exception {
+
+		try {
+			Usuario usuario = servicioAlquileres.historialUsuario(idUsuario);
+			UsuarioResumenDTO resumen = new UsuarioResumenDTO(usuario.getReservas(), usuario.getAlquileres(),
+																usuario.isBloqueado(), usuario.getTiempoUsoHoy(), usuario.getTiempoUsoSemanal());
+			return Response.status(Response.Status.OK).entity(resumen).build();
+		} catch (IllegalArgumentException e) {
+
+			Response.status(Response.Status.BAD_REQUEST).build();
+		}
+
+        return Response.status(Response.Status.BAD_REQUEST).build();
+    }
 	
 	
 
Index: src/main/resources/servicios.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>org.arso.interfaces.services.IServicioAlquileres=org.arso.services.ServicioAlquileres\r\norg.arso.interfaces.services.IServicioEstaciones=org.arso.services.ServicioEstaciones\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/servicios.properties b/src/main/resources/servicios.properties
--- a/src/main/resources/servicios.properties	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/resources/servicios.properties	(date 1715157505679)
@@ -1,5 +1,6 @@
-org.arso.interfaces.services.IServicioAlquileres=org.arso.services.ServicioAlquileres
-org.arso.interfaces.services.IServicioEstaciones=org.arso.services.ServicioEstaciones
+org.arso.interfaces.IServicioAlquileres=org.arso.services.ServicioAlquileres
+org.arso.interfaces.IServicioEstaciones=org.arso.services.ServicioEstaciones
+org.arso.interfaces.IJwtService=org.arso.services.JwtService
 
 
 
Index: src/main/java/org/arso/services/ServicioAlquileres.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.services;\r\n\r\nimport org.arso.communication.ConsumidorEventos;\r\nimport org.arso.communication.Evento;\r\nimport org.arso.communication.PublicadorEventos;\r\nimport org.arso.communication.retrofit.estaciones.model.EstacionarBicicletaDTO;\r\nimport org.arso.factory.FactoriaRepositorios;\r\nimport org.arso.interfaces.services.IServicioAlquileres;\r\nimport org.arso.interfaces.services.IServicioEstaciones;\r\nimport org.arso.model.Alquiler;\r\nimport org.arso.model.Bicicleta;\r\nimport org.arso.model.Reserva;\r\nimport org.arso.model.Usuario;\r\nimport org.arso.repository.*;\r\nimport org.arso.factory.FactoriaServicios;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ServicioAlquileres implements IServicioAlquileres {\r\n\r\n    RepositorioUsuarios repositorio = FactoriaRepositorios.getRepositorio(Usuario.class);\r\n    ConsumidorEventos consumidor = new ConsumidorEventos();\r\n    PublicadorEventos publicador = new PublicadorEventos();\r\n\r\n    @Override\r\n    public Usuario getUsuario(String idUsuario) throws RepositorioException{\r\n        try {\r\n            return repositorio.getById(idUsuario);\r\n        } catch (EntidadNoEncontrada e) {\r\n            Usuario usuario = new Usuario();\r\n            usuario.setId(idUsuario);\r\n            repositorio.add(usuario);\r\n            return usuario;\r\n        }\r\n    }\r\n    @Override\r\n    public void reservarBicicleta(String idUsuario, String idBicicleta) throws IllegalStateException, RepositorioException {\r\n        Usuario usuario = getUsuario(idUsuario);\r\n\r\n        if(usuario.getReservaActiva() != null || usuario.getAlquilerActivo() != null){\r\n            throw new IllegalStateException(\"El usuario ya tiene una reserva o alquiler en estado activo\");\r\n        }\r\n\r\n        if(usuario.isBloqueado() || usuario.superaTiempoUso()){\r\n            throw new IllegalStateException(\"El usuario esta bloqueado o supera el tiempo de uso\");\r\n        }\r\n\r\n        Reserva reserva = new Reserva();\r\n        reserva.setIdBicicleta(idBicicleta);\r\n        reserva.setCreada(LocalDateTime.now());\r\n        reserva.setCaducidad(LocalDateTime.now().plusMinutes(30));\r\n\r\n        usuario.addReserva(reserva);\r\n\r\n        //Todo actualizar usuario en la bbdd\r\n        try {\r\n            repositorio.update(usuario);\r\n        } catch (EntidadNoEncontrada e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void confirmarReserva(String idUsuario) throws IllegalStateException, RepositorioException {\r\n        Usuario usuario = getUsuario(idUsuario);\r\n\r\n        Reserva reserva = usuario.getReservaActiva();\r\n\r\n        if(reserva == null){\r\n            throw new IllegalStateException(\"El usuario no tiene una reserva pendiente de confirmar\");\r\n        }\r\n\r\n        Alquiler alquiler = new Alquiler();\r\n        alquiler.setIdBicicleta(reserva.getIdBicicleta());\r\n        alquiler.setInicio(LocalDateTime.now());\r\n\r\n        usuario.addAlquiler(alquiler);\r\n        usuario.removeReserva(reserva);\r\n\r\n        //Todo actualizar usuario en la bbdd\r\n        try {\r\n            repositorio.update(usuario);\r\n        } catch (EntidadNoEncontrada e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void alquilarBicicleta(String idUsuario, String idBicicleta) throws Exception {\r\n        Usuario usuario = getUsuario(idUsuario);\r\n\r\n        if(usuario.getReservaActiva() != null || usuario.getAlquilerActivo() != null){\r\n            throw new IllegalStateException(\"El usuario ya tiene una reserva o alquiler en estado activo\");\r\n        }\r\n\r\n        if(usuario.isBloqueado() || usuario.superaTiempoUso()){\r\n            throw new IllegalStateException(\"El usuario esta bloqueado o supera el tiempo de uso\");\r\n        }\r\n\r\n        Alquiler alquiler = new Alquiler();\r\n        alquiler.setIdBicicleta(idBicicleta);\r\n        alquiler.setInicio(LocalDateTime.now());\r\n\r\n        usuario.addAlquiler(alquiler);\r\n\r\n        //Todo actualizar usuario en la bbdd\r\n        try {\r\n            repositorio.update(usuario);\r\n        } catch (EntidadNoEncontrada e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        \r\n        //Se crea el evento y se envia\r\n        Evento evento = new Evento(\"bicicleta-alquilada\", LocalDateTime.now(), idBicicleta);\r\n        publicador.publicarEvento(evento);\r\n        \r\n    }\r\n\r\n    @Override\r\n    public Usuario historialUsuario(String idUsuario) throws RepositorioException {\r\n        Usuario usuario = getUsuario(idUsuario);\r\n        return usuario;\r\n    }\r\n\r\n    @Override\r\n    public void dejarBicicleta(String idUsuario, String idEstacion) throws Exception {\r\n        Usuario usuario = getUsuario(idUsuario);\r\n\r\n        Alquiler alquiler = usuario.getAlquilerActivo();\r\n\r\n        if(alquiler == null){\r\n            throw new IllegalStateException(\"El usuario no una reserva pendientes de confirmar\");\r\n        }\r\n\r\n        IServicioEstaciones servicio = FactoriaServicios.getServicio(IServicioEstaciones.class);\r\n\r\n        //Todo obtener la bicicleta\r\n        Bicicleta bicicleta = new Bicicleta();\r\n        EstacionarBicicletaDTO estacionarBici = new EstacionarBicicletaDTO(idEstacion, bicicleta.getId());\r\n        servicio.estacionarBicicleta(estacionarBici);\r\n\r\n        alquiler.setFin(LocalDateTime.now());\r\n\r\n        //Todo actualizar usuario en la bbdd\r\n        try {\r\n            repositorio.update(usuario);\r\n        } catch (EntidadNoEncontrada e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n        \r\n      //Se crea el evento y se envia\r\n        Evento evento = new Evento(\"bicicleta-alquiler-concluido\", LocalDateTime.now(), bicicleta.getId());\r\n        publicador.publicarEvento(evento);\r\n    }\r\n\r\n    @Override\r\n    public void liberarBloqueo(String idUsuario) throws RepositorioException {\r\n        Usuario usuario = getUsuario(idUsuario);\r\n\r\n        List<Reserva> lista = usuario.getReservas().stream()\r\n                                .filter(Reserva::isCaducada)\r\n                                .collect(Collectors.toList());\r\n\r\n        for(Reserva r : lista){\r\n            usuario.removeReserva(r);\r\n        }\r\n\r\n        //Todo actualizar usuario en la bbdd\r\n        try {\r\n            repositorio.update(usuario);\r\n        } catch (EntidadNoEncontrada e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/services/ServicioAlquileres.java b/src/main/java/org/arso/services/ServicioAlquileres.java
--- a/src/main/java/org/arso/services/ServicioAlquileres.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/services/ServicioAlquileres.java	(date 1715157505869)
@@ -5,8 +5,8 @@
 import org.arso.communication.PublicadorEventos;
 import org.arso.communication.retrofit.estaciones.model.EstacionarBicicletaDTO;
 import org.arso.factory.FactoriaRepositorios;
-import org.arso.interfaces.services.IServicioAlquileres;
-import org.arso.interfaces.services.IServicioEstaciones;
+import org.arso.interfaces.IServicioAlquileres;
+import org.arso.interfaces.IServicioEstaciones;
 import org.arso.model.Alquiler;
 import org.arso.model.Bicicleta;
 import org.arso.model.Reserva;
Index: ../estaciones/src/main/java/com/arso/estaciones/auth/ControladorAuth.java
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/auth/ControladorAuth.java b/../estaciones/src/main/java/com/arso/estaciones/auth/ControladorAuth.java
deleted file mode 100644
--- a/../estaciones/src/main/java/com/arso/estaciones/auth/ControladorAuth.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,49 +0,0 @@
-package com.arso.estaciones.auth;
-
-import com.arso.estaciones.model.DTO.LoginDTO;
-import com.arso.estaciones.model.DTO.RegistroDTO;
-import com.arso.estaciones.service.ServicioAuth;
-import io.jsonwebtoken.Jwts;
-import io.swagger.v3.oas.annotations.Operation;
-import io.swagger.v3.oas.annotations.tags.Tag;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-import java.time.Instant;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-import io.jsonwebtoken.SignatureAlgorithm;
-
-@RestController
-@RequestMapping("auth")
-@Tag(name = "Autenticación", description = "Endpoints para autenticación de usuarios")
-public class ControladorAuth {
-
-    private ServicioAuth servicioAuth;
-
-    @Autowired
-    public ControladorAuth(ServicioAuth servicioAuth) {
-        this.servicioAuth = servicioAuth;
-    }
-
-    @Operation(
-            summary = "Iniciar sesión",
-            description = "Inicia sesión de un usuario"
-    )
-    @PostMapping("/login")
-    public ResponseEntity<AuthResponse> login(@RequestBody LoginDTO dto) {
-        return ResponseEntity.ok(servicioAuth.login(dto));
-    }
-
-    @Operation(
-            summary = "Registro de usuario",
-            description = "Registra un nuevo usuario"
-    )
-    @PostMapping("/registro")
-    public ResponseEntity<AuthResponse> registro(@RequestBody RegistroDTO dto){
-        return ResponseEntity.ok(servicioAuth.register(dto));
-    }
-}
Index: ../estaciones/src/main/java/com/arso/estaciones/model/CustomUserDetails.java
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/model/CustomUserDetails.java b/../estaciones/src/main/java/com/arso/estaciones/model/CustomUserDetails.java
deleted file mode 100644
--- a/../estaciones/src/main/java/com/arso/estaciones/model/CustomUserDetails.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,58 +0,0 @@
-package com.arso.estaciones.model;
-
-import org.springframework.security.core.GrantedAuthority;
-import org.springframework.security.core.authority.SimpleGrantedAuthority;
-import org.springframework.security.core.userdetails.UserDetails;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-public class CustomUserDetails extends Usuario implements UserDetails {
-    private String username;
-    private String password;
-    Collection<? extends GrantedAuthority> authorities;
-
-    public CustomUserDetails(Usuario user) {
-        this.username = user.getNombre();
-        this.password = user.getClave();
-        List<GrantedAuthority> auths = new ArrayList<>();
-        auths.add(new SimpleGrantedAuthority(user.getRol().name().toUpperCase()));
-        this.authorities = auths;
-    }
-
-    @Override
-    public Collection<? extends GrantedAuthority> getAuthorities() {
-        return authorities;
-    }
-
-    @Override
-    public String getPassword() {
-        return password;
-    }
-
-    @Override
-    public String getUsername() {
-        return username;
-    }
-
-    @Override
-    public boolean isAccountNonExpired() {
-        return true;
-    }
-
-    @Override
-    public boolean isAccountNonLocked() {
-        return true;
-    }
-
-    @Override
-    public boolean isCredentialsNonExpired() {
-        return true;
-    }
-
-    @Override
-    public boolean isEnabled() {
-        return true;
-    }
-}
Index: ../estaciones/src/main/java/com/arso/estaciones/auth/AuthResponse.java
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/auth/AuthResponse.java b/../estaciones/src/main/java/com/arso/estaciones/auth/AuthResponse.java
deleted file mode 100644
--- a/../estaciones/src/main/java/com/arso/estaciones/auth/AuthResponse.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,14 +0,0 @@
-package com.arso.estaciones.auth;
-
-import lombok.AllArgsConstructor;
-import lombok.Builder;
-import lombok.Data;
-import lombok.NoArgsConstructor;
-
-@Data
-@Builder
-@AllArgsConstructor
-@NoArgsConstructor
-public class AuthResponse {
-    private String token;
-}
Index: ../estaciones/src/main/java/com/arso/estaciones/config/ApplicationConfig.java
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/config/ApplicationConfig.java b/../estaciones/src/main/java/com/arso/estaciones/config/ApplicationConfig.java
deleted file mode 100644
--- a/../estaciones/src/main/java/com/arso/estaciones/config/ApplicationConfig.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,47 +0,0 @@
-package com.arso.estaciones.config;
-
-import com.arso.estaciones.repository.RepositorioUsuarios;
-import lombok.RequiredArgsConstructor;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.security.authentication.AuthenticationManager;
-import org.springframework.security.authentication.AuthenticationProvider;
-import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
-import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
-import org.springframework.security.core.userdetails.UserDetails;
-import org.springframework.security.core.userdetails.UserDetailsService;
-import org.springframework.security.core.userdetails.UsernameNotFoundException;
-import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
-import org.springframework.security.crypto.password.PasswordEncoder;
-
-@Configuration
-@RequiredArgsConstructor
-public class ApplicationConfig {
-
-    private final RepositorioUsuarios repositorioUsuarios;
-    @Bean
-    public UserDetailsService userDetailsService() {
-         return username -> repositorioUsuarios.findByNombre(username)
-                 .orElseThrow(() -> new UsernameNotFoundException("Usuario no encontrado"));
-    }
-
-    @Bean
-    public AuthenticationProvider authenticationProvider() {
-        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
-        authenticationProvider.setUserDetailsService(userDetailsService());
-        authenticationProvider.setPasswordEncoder(passwordEncoder());
-        return authenticationProvider;
-
-    }
-
-    @Bean
-    public PasswordEncoder passwordEncoder() {
-        return new BCryptPasswordEncoder();
-    }
-
-    @Bean
-    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
-        return config.getAuthenticationManager();
-    }
-
-}
Index: ../estaciones/src/main/java/com/arso/estaciones/test/TestJWT.java
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/test/TestJWT.java b/../estaciones/src/main/java/com/arso/estaciones/test/TestJWT.java
deleted file mode 100644
--- a/../estaciones/src/main/java/com/arso/estaciones/test/TestJWT.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,19 +0,0 @@
-package com.arso.estaciones.test;
-
-import com.arso.estaciones.EstacionesApplication;
-import com.arso.estaciones.model.DTO.RegistroDTO;
-import com.arso.estaciones.model.Rol;
-import com.arso.estaciones.service.ServicioAuth;
-import org.springframework.boot.SpringApplication;
-import org.springframework.context.ConfigurableApplicationContext;
-
-public class TestJWT {
-    public static void main(String[] args) {
-        ConfigurableApplicationContext context = SpringApplication.run(EstacionesApplication.class, args);
-        ServicioAuth servicioAuth = context.getBean(ServicioAuth.class);
-
-        RegistroDTO dto = new RegistroDTO("Juan", "admin", Rol.GESTOR);
-        String token = String.valueOf(servicioAuth.register(dto));
-        System.out.println(token);
-    }
-}
Index: ../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioAuth.java
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioAuth.java b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioAuth.java
deleted file mode 100644
--- a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioAuth.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,11 +0,0 @@
-package com.arso.estaciones.interfaces;
-
-import com.arso.estaciones.auth.AuthResponse;
-import com.arso.estaciones.model.DTO.LoginDTO;
-import com.arso.estaciones.model.DTO.RegistroDTO;
-
-public interface IServicioAuth {
-    AuthResponse register(RegistroDTO dto);
-
-    AuthResponse login(LoginDTO dto);
-}
Index: src/main/java/org/arso/services/ServicioUsuarios.java
===================================================================
diff --git a/src/main/java/org/arso/services/ServicioUsuarios.java b/src/main/java/org/arso/services/ServicioUsuarios.java
deleted file mode 100644
--- a/src/main/java/org/arso/services/ServicioUsuarios.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,15 +0,0 @@
-package org.arso.services;
-
-import org.arso.interfaces.services.IServicioUsuarios;
-import org.arso.model.Usuario;
-
-public class ServicioUsuarios implements IServicioUsuarios{
-
-	@Override
-	public boolean autenticarUsuario(Usuario usuario) {
-		// TODO Auto-generated method stub
-		return false;
-	}
-	
-
-}
Index: ../estaciones/src/main/java/com/arso/estaciones/test/BusEventos.java
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/test/BusEventos.java b/../estaciones/src/main/java/com/arso/estaciones/test/BusEventos.java
deleted file mode 100644
--- a/../estaciones/src/main/java/com/arso/estaciones/test/BusEventos.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,14 +0,0 @@
-package com.arso.estaciones.test;
-
-import org.springframework.boot.SpringApplication;
-import org.springframework.boot.autoconfigure.SpringBootApplication;
-
-@SpringBootApplication
-public class BusEventos {
-
-	public static void main(String[] args) {
-		SpringApplication.run(BusEventos.class, args);
-
-	}
-
-}
Index: src/main/java/org/arso/auth/ControladorAuth.java
===================================================================
diff --git a/src/main/java/org/arso/auth/ControladorAuth.java b/src/main/java/org/arso/auth/ControladorAuth.java
deleted file mode 100644
--- a/src/main/java/org/arso/auth/ControladorAuth.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,55 +0,0 @@
-package org.arso.auth;
-
-import java.time.Instant;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.ws.rs.FormParam;
-import javax.ws.rs.POST;
-import javax.ws.rs.Path;
-import javax.ws.rs.core.Response;
-
-import io.jsonwebtoken.Jwts;
-import io.jsonwebtoken.SignatureAlgorithm;
-
-@Path("auth")
-public class ControladorAuth {
-	
-	@POST
-	@Path("/login")
-	public Response login(
-		@FormParam("username") String username,
-		@FormParam("password") String password) {
-		
-		Map<String, Object> claims = verificarCredenciales(username, password);
-		if (claims != null) {
-			Date caducidad = Date.from(
-					Instant.now()
-					.plusSeconds(3600));  // Tiempo de validez
-			String token = Jwts.builder()
-					.setClaims(claims)
-					.signWith(SignatureAlgorithm.HS256, "secreto")
-					.setExpiration(caducidad).compact();
-			
-			return Response.ok(token).build();
-		} else {
-			return Response
-				.status(Response.Status.UNAUTHORIZED).entity("Credenciales inválidas").build();
-		}
-		
-	}
-	
-	
-	private Map<String, Object> verificarCredenciales(String username, String password) {
-		
-		Map<String, Object> claims = new HashMap<String, Object>();
-		claims.put("sub", username);
-		claims.put("roles", "administrador");
-		
-		return claims;
-	}
-	
-	//TODO terminar proceso y hacer uno para el usuario normal
-
-}
Index: src/main/java/org/arso/interfaces/services/IServicioUsuarios.java
===================================================================
diff --git a/src/main/java/org/arso/interfaces/services/IServicioUsuarios.java b/src/main/java/org/arso/interfaces/services/IServicioUsuarios.java
deleted file mode 100644
--- a/src/main/java/org/arso/interfaces/services/IServicioUsuarios.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,9 +0,0 @@
-package org.arso.interfaces.services;
-
-import org.arso.model.Usuario;
-
-public interface IServicioUsuarios {
-	
-	boolean autenticarUsuario(Usuario usuario);
-	
-}
Index: ../estaciones/src/main/java/com/arso/estaciones/service/ServicioAuth.java
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/service/ServicioAuth.java b/../estaciones/src/main/java/com/arso/estaciones/service/ServicioAuth.java
deleted file mode 100644
--- a/../estaciones/src/main/java/com/arso/estaciones/service/ServicioAuth.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ /dev/null	(revision e8033849829168a6329c98b83b04dd2e487f280a)
@@ -1,63 +0,0 @@
-package com.arso.estaciones.service;
-
-import com.arso.estaciones.auth.AuthResponse;
-import com.arso.estaciones.interfaces.IServicioAuth;
-import com.arso.estaciones.model.DTO.LoginDTO;
-import com.arso.estaciones.model.DTO.RegistroDTO;
-import com.arso.estaciones.model.Usuario;
-import com.arso.estaciones.repository.RepositorioUsuarios;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.security.authentication.AuthenticationManager;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
-import org.springframework.security.core.userdetails.UsernameNotFoundException;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.stereotype.Service;
-
-@Service
-//@RequiredArgsConstructor
-public class ServicioAuth implements IServicioAuth {
-    private RepositorioUsuarios repositorioUsuarios;
-    private PasswordEncoder passwordEncoder;
-    private final JwtService jwtService;
-    private final AuthenticationManager authenticationManager;
-
-    @Autowired
-    public ServicioAuth(RepositorioUsuarios repositorioUsuarios, PasswordEncoder passwordEncoder,
-                        JwtService jwtService, AuthenticationManager authenticationManager) {
-        this.repositorioUsuarios = repositorioUsuarios;
-        this.passwordEncoder = passwordEncoder;
-        this.jwtService = jwtService;
-        this.authenticationManager = authenticationManager;
-    }
-
-    @Override
-    public AuthResponse register(RegistroDTO dto) {
-        Usuario usuario = Usuario.builder()
-                            .nombre(dto.getNombre())
-                            .clave(passwordEncoder.encode(dto.getClave()))
-                            .rol(dto.getRol())
-                            .build();
-
-        repositorioUsuarios.save(usuario);
-        String jwtToken = jwtService.generateToken(usuario);
-        return AuthResponse.builder().token(jwtToken).build();
-    }
-
-    @Override
-    public AuthResponse login(LoginDTO dto) {
-        authenticationManager.authenticate(
-                new UsernamePasswordAuthenticationToken(
-                        dto.getNombre(),
-                        dto.getClave()
-                )
-        );
-
-        Usuario usuario = repositorioUsuarios.findByNombre(dto.getNombre())
-                .orElseThrow(() -> new UsernameNotFoundException("Usuario no encontrado"));
-
-        String jwtToken = jwtService.generateToken(usuario);
-        return AuthResponse.builder().token(jwtToken).build();
-
-
-    }
-}
Index: ../estaciones/src/main/java/com/arso/estaciones/repository/EntidadNoEncontrada.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/repository/EntidadNoEncontrada.java b/../estaciones/src/main/java/com/arso/estaciones/repository/EntidadNoEncontrada.java
new file mode 100644
--- /dev/null	(date 1715164651467)
+++ b/../estaciones/src/main/java/com/arso/estaciones/repository/EntidadNoEncontrada.java	(date 1715164651467)
@@ -0,0 +1,9 @@
+package com.arso.estaciones.repository;
+
+public class EntidadNoEncontrada extends Exception{
+
+    public EntidadNoEncontrada(String msg) {
+        super(msg);
+    }
+
+}
Index: ../LoginApi/Models/SignUpCodesRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using MongoDB.Driver;\r\nusing Repositorio;\r\nusing WebApi.Entities;\r\nusing WebApi.Mongo.Repositorio;\r\n\r\nnamespace SignUpCodes.Repositorio;\r\n\r\npublic class SignUpCodesRepository : MongoRepository<SignUpCode>\r\n{\r\n    public override IMongoCollection<SignUpCode> GetCollection()\r\n    {\r\n        var database = base.GetDatabase();\r\n        var collection = database.GetCollection<SignUpCode>(\"code\");\r\n        return collection;\r\n    }\r\n\r\n    public override string GetCollectionName()\r\n    {\r\n        return \"users\";\r\n    }\r\n\r\n    public SignUpCode FindByUserIdAndToken(string userId, string token){\r\n        var database = base.GetDatabase();\r\n        var collection = database.GetCollection<SignUpCode>(\"code\");\r\n\r\n        var filter = Builders<SignUpCode>.Filter.And(\r\n            Builders<SignUpCode>.Filter.Eq(code => code.UserId, userId),\r\n            Builders<SignUpCode>.Filter.Eq(code => code.Code, token)\r\n        );\r\n\r\n        return collection.Find(filter).FirstOrDefault();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/Models/SignUpCodesRepository.cs b/../LoginApi/Models/SignUpCodesRepository.cs
--- a/../LoginApi/Models/SignUpCodesRepository.cs	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/Models/SignUpCodesRepository.cs	(date 1715107241254)
@@ -2,26 +2,31 @@
 using Repositorio;
 using WebApi.Entities;
 using WebApi.Mongo.Repositorio;
+using Microsoft.Extensions.Configuration;
 
 namespace SignUpCodes.Repositorio;
 
 public class SignUpCodesRepository : MongoRepository<SignUpCode>
 {
+    public SignUpCodesRepository(IConfiguration configuration) : base(configuration){
+
+    }
+
     public override IMongoCollection<SignUpCode> GetCollection()
     {
         var database = base.GetDatabase();
-        var collection = database.GetCollection<SignUpCode>("code");
+        var collection = database.GetCollection<SignUpCode>("codes");
         return collection;
     }
 
     public override string GetCollectionName()
     {
-        return "users";
+        return "dbUsuarios";
     }
 
     public SignUpCode FindByUserIdAndToken(string userId, string token){
         var database = base.GetDatabase();
-        var collection = database.GetCollection<SignUpCode>("code");
+        var collection = database.GetCollection<SignUpCode>("codes");
 
         var filter = Builders<SignUpCode>.Filter.And(
             Builders<SignUpCode>.Filter.Eq(code => code.UserId, userId),
Index: ../estaciones/src/main/java/com/arso/estaciones/config/EntidadNoEncontradaHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/config/EntidadNoEncontradaHandler.java b/../estaciones/src/main/java/com/arso/estaciones/config/EntidadNoEncontradaHandler.java
new file mode 100644
--- /dev/null	(date 1715164651494)
+++ b/../estaciones/src/main/java/com/arso/estaciones/config/EntidadNoEncontradaHandler.java	(date 1715164651494)
@@ -0,0 +1,32 @@
+package com.arso.estaciones.config;
+
+import com.arso.estaciones.repository.EntidadNoEncontrada;
+import io.jsonwebtoken.ExpiredJwtException;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ControllerAdvice;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ControllerAdvice
+public class EntidadNoEncontradaHandler {
+    @ExceptionHandler(EntidadNoEncontrada.class)
+    @ResponseBody
+    @ResponseStatus(HttpStatus.NOT_FOUND)
+    public RespuestaError handleEntidadNoEncontradaException(EntidadNoEncontrada ex) {
+        return new RespuestaError("Not Found", ex.getMessage());
+    }
+
+    @Data
+    @Builder
+    @AllArgsConstructor
+    @NoArgsConstructor
+    private static class RespuestaError{
+        private String estado;
+        private String mensaje;
+    }
+}
Index: src/main/java/org/arso/auth/JwtTokenFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.auth;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\nimport javax.annotation.Priority;\r\nimport javax.annotation.security.PermitAll;\r\nimport javax.annotation.security.RolesAllowed;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.ws.rs.container.ContainerRequestContext;\r\nimport javax.ws.rs.ext.Provider;\r\n\r\nimport io.jsonwebtoken.Claims;\r\nimport io.jsonwebtoken.Jwts;\r\n\r\nimport javax.ws.rs.container.ContainerRequestFilter;\r\nimport javax.ws.rs.container.ResourceInfo;\r\nimport javax.ws.rs.core.Context;\r\nimport javax.ws.rs.core.Response;\r\nimport javax.ws.rs.Priorities;\r\n\r\n@Provider\r\n@Priority(Priorities.AUTHENTICATION)\r\npublic class JwtTokenFilter implements ContainerRequestFilter {\r\n\r\n\t@Context\r\n\tprivate ResourceInfo resourceInfo;\r\n\r\n\t@Context\r\n\tprivate HttpServletRequest servletRequest; // Peticion a bajo nivel\r\n\r\n\t@Override\r\n\tpublic void filter(ContainerRequestContext requestContext) {\r\n\r\n\t\t// Comprobamos si la ruta tiene la anotación @PermitAll\r\n\t\tif (resourceInfo.getResourceMethod().isAnnotationPresent(PermitAll.class)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Implementación del control de autorización\r\n\t\tString authorization = requestContext.getHeaderString(\"Authorization\");\r\n\t\tif (authorization == null || !authorization.startsWith(\"Bearer \")) {\r\n\t\t\trequestContext.abortWith(Response.status(Response.Status.UNAUTHORIZED).build());\r\n\t\t} else {\r\n\t\t\tString token = authorization.substring(\"Bearer \".length()).trim();\r\n\t\t\ttry {\r\n\t\t\t\tClaims claims = Jwts.parser().setSigningKey(\"secreto\").parseClaimsJws(token).getBody();\r\n\r\n\t\t\t\tthis.servletRequest.setAttribute(\"claims\", claims);\r\n\r\n\t\t\t\tDate caducidad = claims.getExpiration();\r\n\r\n\t\t\t\tif (caducidad.before(new Date()))\r\n\t\t\t\t\trequestContext.abortWith(Response.status(Response.Status.UNAUTHORIZED).build());\r\n\r\n\t\t\t\t// Control por roles\r\n\t\t\t\tSet<String> roles = new HashSet<>(Arrays.asList(claims.get(\"roles\", String.class).split(\",\")));\r\n\r\n\t\t\t\tif (this.resourceInfo.getResourceMethod().isAnnotationPresent(RolesAllowed.class)) {\r\n\r\n\t\t\t\t\tString[] allowedRoles = resourceInfo.getResourceMethod().getAnnotation(RolesAllowed.class).value();\r\n\r\n\t\t\t\t\tif (roles.stream().noneMatch(userRole -> Arrays.asList(allowedRoles).contains(userRole))) {\r\n\t\t\t\t\t\trequestContext.abortWith(Response.status(Response.Status.FORBIDDEN).build());\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} catch (Exception e) { // Error de validación\r\n\t\t\t\trequestContext.abortWith(Response.status(Response.Status.UNAUTHORIZED).build());\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/auth/JwtTokenFilter.java b/src/main/java/org/arso/auth/JwtTokenFilter.java
--- a/src/main/java/org/arso/auth/JwtTokenFilter.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/auth/JwtTokenFilter.java	(date 1715158556774)
@@ -13,7 +13,9 @@
 import javax.ws.rs.ext.Provider;
 
 import io.jsonwebtoken.Claims;
-import io.jsonwebtoken.Jwts;
+import org.arso.factory.FactoriaServicios;
+import org.arso.interfaces.IJwtService;
+import org.arso.model.Rol;
 
 import javax.ws.rs.container.ContainerRequestFilter;
 import javax.ws.rs.container.ResourceInfo;
@@ -31,6 +33,8 @@
 	@Context
 	private HttpServletRequest servletRequest; // Peticion a bajo nivel
 
+	private IJwtService jwtService = FactoriaServicios.getServicio(IJwtService .class);
+
 	@Override
 	public void filter(ContainerRequestContext requestContext) {
 
@@ -46,7 +50,7 @@
 		} else {
 			String token = authorization.substring("Bearer ".length()).trim();
 			try {
-				Claims claims = Jwts.parser().setSigningKey("secreto").parseClaimsJws(token).getBody();
+				Claims claims = jwtService.extractAllClaims(token);
 
 				this.servletRequest.setAttribute("claims", claims);
 
@@ -56,15 +60,31 @@
 					requestContext.abortWith(Response.status(Response.Status.UNAUTHORIZED).build());
 
 				// Control por roles
-				Set<String> roles = new HashSet<>(Arrays.asList(claims.get("roles", String.class).split(",")));
+				int rolInt = claims.get("rol", Integer.class);
+
+
+				Rol rol = null;
+
+				switch (rolInt) {
+					case -1:
+						rol = Rol.GESTOR;
+						break;
+					case 0:
+						rol = Rol.NORMAL;
+						break;
+					default:
+						throw new IllegalArgumentException("Valor de rol desconocido: " + rolInt);
+				}
+
+				Set<String> authorities = new HashSet<>();
+				authorities.add(rol.name());
 
 				if (this.resourceInfo.getResourceMethod().isAnnotationPresent(RolesAllowed.class)) {
 
 					String[] allowedRoles = resourceInfo.getResourceMethod().getAnnotation(RolesAllowed.class).value();
 
-					if (roles.stream().noneMatch(userRole -> Arrays.asList(allowedRoles).contains(userRole))) {
+					if (authorities.stream().noneMatch(userRole -> Arrays.asList(allowedRoles).contains(userRole))) {
 						requestContext.abortWith(Response.status(Response.Status.FORBIDDEN).build());
-
 					}
 				}
 
Index: src/main/java/org/arso/tests/ProgramEjercicio2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.tests;\r\n\r\nimport org.arso.factory.FactoriaRepositorios;\r\nimport org.arso.factory.FactoriaServicios;\r\nimport org.arso.interfaces.services.IServicioAlquileres;\r\nimport org.arso.model.Reserva;\r\nimport org.arso.model.Usuario;\r\nimport org.arso.repository.NotAllowedException;\r\nimport org.arso.repository.RepositorioException;\r\nimport org.arso.repository.RepositorioUsuarios;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\npublic class ProgramEjercicio2 {\r\n    public static void main(String[] args) throws NotAllowedException, RepositorioException {\r\n        //RepositorioUsuarios repositorio = FactoriaRepositorios.getRepositorio(Usuario.class);\r\n        IServicioAlquileres servicio = FactoriaServicios.getServicio(IServicioAlquileres.class);\r\n\r\n        //Reservar bicicleta con repositorio en memoria\r\n        servicio.reservarBicicleta(\"1\", \"5\");\r\n\r\n        //Confirmar la reserva activa del usuario\r\n        servicio.confirmarReserva(\"1\");\r\n\r\n        //Alquilar bicicleta sin reserva previa\r\n        //Para que funcione se deben comentar los dos metodos anteriores del servicio\r\n        //ya que solo podemos alguilar directamente una bici si no tenemo ninguna reserva ni alquiler activo\r\n        //servicio.alquilarBicicleta(\"1\", \"4\");\r\n\r\n        //Obtener el historial del usuario\r\n        /*Usuario usuario = servicio.historialUsuario(\"1\");\r\n        System.out.println(usuario.toString());*/\r\n\r\n        //Dejar la bicicleta en una estación\r\n        //servicio.dejarBicicleta(\"1\", \"333\");\r\n\r\n        //Liberar al usuario del bloqueo.\r\n        //Para ello primero creamos una reserva que se vaya a bloquear.\r\n        /*Reserva r = new Reserva();\r\n        r.setIdBicicleta(\"2\");\r\n        r.setCreada(LocalDateTime.now().minusMinutes(35));\r\n        r.setCaducidad(LocalDateTime.now());\r\n\r\n        usuario.addReserva(r);\r\n\r\n        servicio.liberarBloqueo(\"1\");*/\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/tests/ProgramEjercicio2.java b/src/main/java/org/arso/tests/ProgramEjercicio2.java
--- a/src/main/java/org/arso/tests/ProgramEjercicio2.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/tests/ProgramEjercicio2.java	(date 1715157505745)
@@ -1,15 +1,9 @@
 package org.arso.tests;
 
-import org.arso.factory.FactoriaRepositorios;
 import org.arso.factory.FactoriaServicios;
-import org.arso.interfaces.services.IServicioAlquileres;
-import org.arso.model.Reserva;
-import org.arso.model.Usuario;
+import org.arso.interfaces.IServicioAlquileres;
 import org.arso.repository.NotAllowedException;
 import org.arso.repository.RepositorioException;
-import org.arso.repository.RepositorioUsuarios;
-
-import java.time.LocalDateTime;
 
 public class ProgramEjercicio2 {
     public static void main(String[] args) throws NotAllowedException, RepositorioException {
@@ -20,7 +14,7 @@
         servicio.reservarBicicleta("1", "5");
 
         //Confirmar la reserva activa del usuario
-        servicio.confirmarReserva("1");
+        //servicio.confirmarReserva("1");
 
         //Alquilar bicicleta sin reserva previa
         //Para que funcione se deben comentar los dos metodos anteriores del servicio
Index: src/main/java/org/arso/interfaces/services/IServicioAlquileres.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/interfaces/services/IServicioAlquileres.java b/src/main/java/org/arso/interfaces/IServicioAlquileres.java
rename from src/main/java/org/arso/interfaces/services/IServicioAlquileres.java
rename to src/main/java/org/arso/interfaces/IServicioAlquileres.java
--- a/src/main/java/org/arso/interfaces/services/IServicioAlquileres.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/interfaces/IServicioAlquileres.java	(date 1715157505886)
@@ -1,9 +1,8 @@
-package org.arso.interfaces.services;
+package org.arso.interfaces;
 
 import java.io.IOException;
 
 import org.arso.model.Usuario;
-import org.arso.repository.NotAllowedException;
 import org.arso.repository.RepositorioException;
 import org.arso.services.ServicioAlquileresException;
 
Index: src/main/java/org/arso/factory/FactoriaRepositorios.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.factory;\r\n\r\n\r\nimport org.arso.interfaces.repository.IRepositorio;\r\nimport org.arso.utils.PropertiesReader;\r\n\r\npublic class FactoriaRepositorios {\r\n\t\r\nprivate static final String PROPERTIES = \"repositorios.properties\";\r\n\t\r\n\t\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tpublic static <K, T, R extends IRepositorio<K, T>> R getRepositorio(Class<?> entidad) {\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\ttry {\t\t\t\t\r\n\t\t\t\t\tPropertiesReader properties = new PropertiesReader(PROPERTIES);\r\n\t\t\t\t\tString clase = properties.getProperty(entidad.getName());\r\n\t\t\t\t\treturn (R) Class.forName(clase).getConstructor().newInstance();\r\n\t\t\t}\r\n\t\t\tcatch (Exception e) {\r\n\t\t\t\t\r\n\t\t\t\te.printStackTrace(); // útil para depuración\r\n\t\t\t\t\r\n\t\t\t\tthrow new RuntimeException(\"No se ha podido obtener el repositorio para la entidad: \" + entidad.getName());\r\n\t\t\t}\r\n\t\t\t\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/factory/FactoriaRepositorios.java b/src/main/java/org/arso/factory/FactoriaRepositorios.java
--- a/src/main/java/org/arso/factory/FactoriaRepositorios.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/factory/FactoriaRepositorios.java	(date 1715157505848)
@@ -1,7 +1,7 @@
 package org.arso.factory;
 
 
-import org.arso.interfaces.repository.IRepositorio;
+import org.arso.interfaces.IRepositorio;
 import org.arso.utils.PropertiesReader;
 
 public class FactoriaRepositorios {
Index: ../LoginApi/obj/project.nuget.cache
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"version\": 2,\r\n  \"dgSpecHash\": \"w6/QG/wUFB+55Jrywe2EMp8q6L6/bC0xssMwXYylXApOGhuACw9nEaJHeJkvKPMw0g1FY3qo/1NA/W97Z5wqvQ==\",\r\n  \"success\": true,\r\n  \"projectFilePath\": \"c:\\\\Users\\\\herna\\\\OneDrive\\\\Escritorio\\\\EnOneDrive\\\\UNIVERSIDAD\\\\UNIVERSIDAD23-24\\\\ARSO\\\\mircoserviciosARSO\\\\LoginApi\\\\LoginApi.csproj\",\r\n  \"expectedPackageFiles\": [\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\automapper\\\\13.0.1\\\\automapper.13.0.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\awssdk.core\\\\3.7.100.14\\\\awssdk.core.3.7.100.14.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\awssdk.securitytoken\\\\3.7.100.14\\\\awssdk.securitytoken.3.7.100.14.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\bcrypt.net-next\\\\4.0.3\\\\bcrypt.net-next.4.0.3.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\dnsclient\\\\1.6.1\\\\dnsclient.1.6.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\identitymodel\\\\7.0.0\\\\identitymodel.7.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.extensions.apidescription.server\\\\6.0.5\\\\microsoft.extensions.apidescription.server.6.0.5.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.extensions.dependencyinjection.abstractions\\\\6.0.0\\\\microsoft.extensions.dependencyinjection.abstractions.6.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.extensions.logging.abstractions\\\\2.0.0\\\\microsoft.extensions.logging.abstractions.2.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.extensions.options\\\\6.0.0\\\\microsoft.extensions.options.6.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.extensions.primitives\\\\6.0.0\\\\microsoft.extensions.primitives.6.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.identitymodel.abstractions\\\\7.5.1\\\\microsoft.identitymodel.abstractions.7.5.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.identitymodel.jsonwebtokens\\\\7.5.1\\\\microsoft.identitymodel.jsonwebtokens.7.5.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.identitymodel.logging\\\\7.5.1\\\\microsoft.identitymodel.logging.7.5.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.identitymodel.tokens\\\\7.5.1\\\\microsoft.identitymodel.tokens.7.5.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.netcore.platforms\\\\5.0.0\\\\microsoft.netcore.platforms.5.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.openapi\\\\1.2.3\\\\microsoft.openapi.1.2.3.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\microsoft.win32.registry\\\\5.0.0\\\\microsoft.win32.registry.5.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\mongodb.bson\\\\2.25.0\\\\mongodb.bson.2.25.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\mongodb.driver\\\\2.25.0\\\\mongodb.driver.2.25.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\mongodb.driver.core\\\\2.25.0\\\\mongodb.driver.core.2.25.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\mongodb.libmongocrypt\\\\1.8.2\\\\mongodb.libmongocrypt.1.8.2.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\sharpcompress\\\\0.30.1\\\\sharpcompress.0.30.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\snappier\\\\1.0.0\\\\snappier.1.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\swashbuckle.aspnetcore\\\\6.5.0\\\\swashbuckle.aspnetcore.6.5.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\swashbuckle.aspnetcore.swagger\\\\6.5.0\\\\swashbuckle.aspnetcore.swagger.6.5.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\swashbuckle.aspnetcore.swaggergen\\\\6.5.0\\\\swashbuckle.aspnetcore.swaggergen.6.5.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\swashbuckle.aspnetcore.swaggerui\\\\6.5.0\\\\swashbuckle.aspnetcore.swaggerui.6.5.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\system.buffers\\\\4.5.1\\\\system.buffers.4.5.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\system.identitymodel.tokens.jwt\\\\7.5.1\\\\system.identitymodel.tokens.jwt.7.5.1.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\system.memory\\\\4.5.5\\\\system.memory.4.5.5.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\system.runtime.compilerservices.unsafe\\\\6.0.0\\\\system.runtime.compilerservices.unsafe.6.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\system.security.accesscontrol\\\\5.0.0\\\\system.security.accesscontrol.5.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\system.security.principal.windows\\\\5.0.0\\\\system.security.principal.windows.5.0.0.nupkg.sha512\",\r\n    \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\zstdsharp.port\\\\0.7.3\\\\zstdsharp.port.0.7.3.nupkg.sha512\"\r\n  ],\r\n  \"logs\": []\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/obj/project.nuget.cache b/../LoginApi/obj/project.nuget.cache
--- a/../LoginApi/obj/project.nuget.cache	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/obj/project.nuget.cache	(date 1715152461070)
@@ -1,8 +1,8 @@
 {
   "version": 2,
-  "dgSpecHash": "w6/QG/wUFB+55Jrywe2EMp8q6L6/bC0xssMwXYylXApOGhuACw9nEaJHeJkvKPMw0g1FY3qo/1NA/W97Z5wqvQ==",
+  "dgSpecHash": "oA36ED0WWyzyAQs2tKl1r35pxxGUJy4Vvhm00twLhdWhlf0X800K/KHm0syXmlTW8H8c/BYgoSE+WJ6IhEByeA==",
   "success": true,
-  "projectFilePath": "c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj",
+  "projectFilePath": "C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj",
   "expectedPackageFiles": [
     "C:\\Users\\herna\\.nuget\\packages\\automapper\\13.0.1\\automapper.13.0.1.nupkg.sha512",
     "C:\\Users\\herna\\.nuget\\packages\\awssdk.core\\3.7.100.14\\awssdk.core.3.7.100.14.nupkg.sha512",
Index: ../LoginApi/obj/Debug/net6.0/LoginApi.GeneratedMSBuildEditorConfig.editorconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>is_global = true\r\nbuild_property.TargetFramework = net6.0\r\nbuild_property.TargetPlatformMinVersion = \r\nbuild_property.UsingMicrosoftNETSdkWeb = true\r\nbuild_property.ProjectTypeGuids = \r\nbuild_property.InvariantGlobalization = \r\nbuild_property.PlatformNeutralAssembly = \r\nbuild_property.EnforceExtendedAnalyzerRules = \r\nbuild_property._SupportedPlatformList = Linux,macOS,Windows\r\nbuild_property.RootNamespace = LoginApi\r\nbuild_property.RootNamespace = LoginApi\r\nbuild_property.ProjectDir = c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\\r\nbuild_property.EnableComHosting = \r\nbuild_property.EnableGeneratedComInterfaceComImportInterop = \r\nbuild_property.RazorLangVersion = 6.0\r\nbuild_property.SupportLocalizedComponentNames = \r\nbuild_property.GenerateRazorMetadataSourceChecksumAttributes = \r\nbuild_property.MSBuildProjectDirectory = c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\r\nbuild_property._RazorSourceGeneratorDebug = \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/obj/Debug/net6.0/LoginApi.GeneratedMSBuildEditorConfig.editorconfig b/../LoginApi/obj/Debug/net6.0/LoginApi.GeneratedMSBuildEditorConfig.editorconfig
--- a/../LoginApi/obj/Debug/net6.0/LoginApi.GeneratedMSBuildEditorConfig.editorconfig	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/obj/Debug/net6.0/LoginApi.GeneratedMSBuildEditorConfig.editorconfig	(date 1715152466163)
@@ -9,11 +9,11 @@
 build_property._SupportedPlatformList = Linux,macOS,Windows
 build_property.RootNamespace = LoginApi
 build_property.RootNamespace = LoginApi
-build_property.ProjectDir = c:\Users\herna\OneDrive\Escritorio\EnOneDrive\UNIVERSIDAD\UNIVERSIDAD23-24\ARSO\mircoserviciosARSO\LoginApi\
+build_property.ProjectDir = C:\Users\herna\OneDrive\Escritorio\EnOneDrive\UNIVERSIDAD\UNIVERSIDAD23-24\ARSO\mircoserviciosARSO\LoginApi\
 build_property.EnableComHosting = 
 build_property.EnableGeneratedComInterfaceComImportInterop = 
 build_property.RazorLangVersion = 6.0
 build_property.SupportLocalizedComponentNames = 
 build_property.GenerateRazorMetadataSourceChecksumAttributes = 
-build_property.MSBuildProjectDirectory = c:\Users\herna\OneDrive\Escritorio\EnOneDrive\UNIVERSIDAD\UNIVERSIDAD23-24\ARSO\mircoserviciosARSO\LoginApi
+build_property.MSBuildProjectDirectory = C:\Users\herna\OneDrive\Escritorio\EnOneDrive\UNIVERSIDAD\UNIVERSIDAD23-24\ARSO\mircoserviciosARSO\LoginApi
 build_property._RazorSourceGeneratorDebug = 
Index: ../LoginApi/obj/LoginApi.csproj.nuget.dgspec.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"format\": 1,\r\n  \"restore\": {\r\n    \"c:\\\\Users\\\\herna\\\\OneDrive\\\\Escritorio\\\\EnOneDrive\\\\UNIVERSIDAD\\\\UNIVERSIDAD23-24\\\\ARSO\\\\mircoserviciosARSO\\\\LoginApi\\\\LoginApi.csproj\": {}\r\n  },\r\n  \"projects\": {\r\n    \"c:\\\\Users\\\\herna\\\\OneDrive\\\\Escritorio\\\\EnOneDrive\\\\UNIVERSIDAD\\\\UNIVERSIDAD23-24\\\\ARSO\\\\mircoserviciosARSO\\\\LoginApi\\\\LoginApi.csproj\": {\r\n      \"version\": \"1.0.0\",\r\n      \"restore\": {\r\n        \"projectUniqueName\": \"c:\\\\Users\\\\herna\\\\OneDrive\\\\Escritorio\\\\EnOneDrive\\\\UNIVERSIDAD\\\\UNIVERSIDAD23-24\\\\ARSO\\\\mircoserviciosARSO\\\\LoginApi\\\\LoginApi.csproj\",\r\n        \"projectName\": \"LoginApi\",\r\n        \"projectPath\": \"c:\\\\Users\\\\herna\\\\OneDrive\\\\Escritorio\\\\EnOneDrive\\\\UNIVERSIDAD\\\\UNIVERSIDAD23-24\\\\ARSO\\\\mircoserviciosARSO\\\\LoginApi\\\\LoginApi.csproj\",\r\n        \"packagesPath\": \"C:\\\\Users\\\\herna\\\\.nuget\\\\packages\\\\\",\r\n        \"outputPath\": \"c:\\\\Users\\\\herna\\\\OneDrive\\\\Escritorio\\\\EnOneDrive\\\\UNIVERSIDAD\\\\UNIVERSIDAD23-24\\\\ARSO\\\\mircoserviciosARSO\\\\LoginApi\\\\obj\\\\\",\r\n        \"projectStyle\": \"PackageReference\",\r\n        \"fallbackFolders\": [\r\n          \"E:\\\\VStudio\\\\COMPONENTS\\\\NuGetPackages\"\r\n        ],\r\n        \"configFilePaths\": [\r\n          \"C:\\\\Users\\\\herna\\\\AppData\\\\Roaming\\\\NuGet\\\\NuGet.Config\",\r\n          \"C:\\\\Program Files (x86)\\\\NuGet\\\\Config\\\\Microsoft.VisualStudio.FallbackLocation.config\",\r\n          \"C:\\\\Program Files (x86)\\\\NuGet\\\\Config\\\\Microsoft.VisualStudio.Offline.config\"\r\n        ],\r\n        \"originalTargetFrameworks\": [\r\n          \"net6.0\"\r\n        ],\r\n        \"sources\": {\r\n          \"C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\NuGetPackages\\\\\": {},\r\n          \"https://api.nuget.org/v3/index.json\": {}\r\n        },\r\n        \"frameworks\": {\r\n          \"net6.0\": {\r\n            \"targetAlias\": \"net6.0\",\r\n            \"projectReferences\": {}\r\n          }\r\n        },\r\n        \"warningProperties\": {\r\n          \"warnAsError\": [\r\n            \"NU1605\"\r\n          ]\r\n        },\r\n        \"restoreAuditProperties\": {\r\n          \"enableAudit\": \"true\",\r\n          \"auditLevel\": \"low\",\r\n          \"auditMode\": \"direct\"\r\n        }\r\n      },\r\n      \"frameworks\": {\r\n        \"net6.0\": {\r\n          \"targetAlias\": \"net6.0\",\r\n          \"dependencies\": {\r\n            \"AutoMapper\": {\r\n              \"target\": \"Package\",\r\n              \"version\": \"[13.0.1, )\"\r\n            },\r\n            \"BCrypt.Net-Next\": {\r\n              \"target\": \"Package\",\r\n              \"version\": \"[4.0.3, )\"\r\n            },\r\n            \"IdentityModel\": {\r\n              \"target\": \"Package\",\r\n              \"version\": \"[7.0.0, )\"\r\n            },\r\n            \"MongoDB.Bson\": {\r\n              \"target\": \"Package\",\r\n              \"version\": \"[2.25.0, )\"\r\n            },\r\n            \"MongoDB.Driver\": {\r\n              \"target\": \"Package\",\r\n              \"version\": \"[2.25.0, )\"\r\n            },\r\n            \"Swashbuckle.AspNetCore\": {\r\n              \"target\": \"Package\",\r\n              \"version\": \"[6.5.0, )\"\r\n            },\r\n            \"System.IdentityModel.Tokens.Jwt\": {\r\n              \"target\": \"Package\",\r\n              \"version\": \"[7.5.1, )\"\r\n            }\r\n          },\r\n          \"imports\": [\r\n            \"net461\",\r\n            \"net462\",\r\n            \"net47\",\r\n            \"net471\",\r\n            \"net472\",\r\n            \"net48\",\r\n            \"net481\"\r\n          ],\r\n          \"assetTargetFallback\": true,\r\n          \"warn\": true,\r\n          \"frameworkReferences\": {\r\n            \"Microsoft.AspNetCore.App\": {\r\n              \"privateAssets\": \"none\"\r\n            },\r\n            \"Microsoft.NETCore.App\": {\r\n              \"privateAssets\": \"all\"\r\n            }\r\n          },\r\n          \"runtimeIdentifierGraphPath\": \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\8.0.204\\\\RuntimeIdentifierGraph.json\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/obj/LoginApi.csproj.nuget.dgspec.json b/../LoginApi/obj/LoginApi.csproj.nuget.dgspec.json
--- a/../LoginApi/obj/LoginApi.csproj.nuget.dgspec.json	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/obj/LoginApi.csproj.nuget.dgspec.json	(date 1715152461080)
@@ -1,17 +1,17 @@
 {
   "format": 1,
   "restore": {
-    "c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj": {}
+    "C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj": {}
   },
   "projects": {
-    "c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj": {
+    "C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj": {
       "version": "1.0.0",
       "restore": {
-        "projectUniqueName": "c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj",
+        "projectUniqueName": "C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj",
         "projectName": "LoginApi",
-        "projectPath": "c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj",
+        "projectPath": "C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\LoginApi.csproj",
         "packagesPath": "C:\\Users\\herna\\.nuget\\packages\\",
-        "outputPath": "c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\obj\\",
+        "outputPath": "C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\LoginApi\\obj\\",
         "projectStyle": "PackageReference",
         "fallbackFolders": [
           "E:\\VStudio\\COMPONENTS\\NuGetPackages"
Index: src/main/java/org/arso/repository/onmemory/RepositorioMemoria.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.repository.onmemory;\r\n\r\nimport org.arso.interfaces.IIdentificable;\r\nimport org.arso.interfaces.repository.IRepositorioString;\r\nimport org.arso.repository.EntidadNoEncontrada;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\npublic class RepositorioMemoria<T extends IIdentificable> implements IRepositorioString<T> {\r\n\t\r\n\tprivate HashMap<String, T> entidades = new HashMap<>();\r\n\t\r\n\tprivate int id = 1;\r\n\r\n    @Override\r\n    public String add(T entity) {\r\n        String id = entity.getId();\r\n        if(id == null || id.isEmpty()){\r\n            id = String.valueOf(this.id++);\r\n            entity.setId(id);\r\n        }\r\n\t\tthis.entidades.put(id, entity);\r\n\t\t\r\n\t\treturn id;\r\n    }\r\n\r\n    @Override\r\n    public void update(T entity) throws EntidadNoEncontrada {\r\n    \t\r\n    \tif (! this.entidades.containsKey(entity.getId()))\r\n\t\t\tthrow new EntidadNoEncontrada(entity.getId() + \" no existe en el repositorio\");\r\n\t\t\r\n\t\tthis.entidades.put(entity.getId(), entity);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void delete(T entity) throws EntidadNoEncontrada {\r\n    \t\r\n    \tif (! this.entidades.containsKey(entity.getId()))\r\n\t\t\tthrow new EntidadNoEncontrada(entity.getId() + \" no existe en el repositorio\");\r\n\t\t\r\n\t\tthis.entidades.remove(entity.getId());\r\n\r\n    }\r\n\r\n    @Override\r\n    public T getById(String id) throws EntidadNoEncontrada {\r\n\r\n    \tif (! this.entidades.containsKey(id))\r\n\t\t\tthrow new EntidadNoEncontrada(id + \" no existe en el repositorio\");\r\n    \t\r\n    \treturn this.entidades.get(id);\r\n    }\r\n\r\n    @Override\r\n    public List<T> getAll() {\r\n    \t\r\n        return new ArrayList<>(entidades.values());\r\n    }\r\n\r\n    @Override\r\n    public List<String> getIds() {\r\n    \t\r\n        return new ArrayList<>(entidades.keySet());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/repository/onmemory/RepositorioMemoria.java b/src/main/java/org/arso/repository/onmemory/RepositorioMemoria.java
--- a/src/main/java/org/arso/repository/onmemory/RepositorioMemoria.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/repository/onmemory/RepositorioMemoria.java	(date 1715157505810)
@@ -1,7 +1,7 @@
 package org.arso.repository.onmemory;
 
 import org.arso.interfaces.IIdentificable;
-import org.arso.interfaces.repository.IRepositorioString;
+import org.arso.interfaces.IRepositorioString;
 import org.arso.repository.EntidadNoEncontrada;
 
 import java.util.ArrayList;
Index: ../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>aa87eb4fdc123af376019cf260075f00e36be1e480a9baa9726288855de4a024\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache b/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache
--- a/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache	(date 1715094766303)
@@ -1,1 +1,1 @@
-aa87eb4fdc123af376019cf260075f00e36be1e480a9baa9726288855de4a024
+93da190c55f75cd14150b41935c4f7239fa36a7dc6abe484ee57d78ff8b77475
Index: ../LoginApi/Models/UsersRepositorio.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using MongoDB.Driver;\r\nusing WebApi.Entities;\r\nusing Repositorio;\r\nusing WebApi.Helpers;\r\nusing WebApi.Mongo.Repositorio;\r\n\r\nnamespace Users.Repositorio;\r\npublic class RepositorioUsersMongoDB : MongoRepository<User>\r\n{\r\n    public override string Add(User entity){\r\n        var users = GetCollection();\r\n        if (users.Find(x => x.Username == entity.Username).Any()){\r\n                throw new AppException(\"Username '\" + entity.Username + \"' is already taken\");\r\n            }\r\n\r\n        return base.Add(entity);\r\n\r\n    }\r\n\r\n    public User FindByUsername(string username){\r\n        var database = base.GetDatabase();\r\n        var collection = database.GetCollection<User>(\"users.net\");\r\n\r\n        var filter = Builders<User>.Filter.And(\r\n            Builders<User>.Filter.Eq(user => user.Username, username)\r\n        );\r\n\r\n        return collection.Find(filter).FirstOrDefault();\r\n    }\r\n    \r\n    public override IMongoCollection<User> GetCollection()\r\n    {\r\n        var database = base.GetDatabase();\r\n        var collection = database.GetCollection<User>(\"users.net\");\r\n        return collection;\r\n    }\r\n\r\n    public override string GetCollectionName()\r\n    {\r\n        return \"users\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/Models/UsersRepositorio.cs b/../LoginApi/Models/UsersRepositorio.cs
--- a/../LoginApi/Models/UsersRepositorio.cs	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/Models/UsersRepositorio.cs	(date 1715106639563)
@@ -3,10 +3,16 @@
 using Repositorio;
 using WebApi.Helpers;
 using WebApi.Mongo.Repositorio;
+using Microsoft.Extensions.Configuration;
 
 namespace Users.Repositorio;
 public class RepositorioUsersMongoDB : MongoRepository<User>
 {
+
+    public RepositorioUsersMongoDB(IConfiguration configuration) : base(configuration){
+
+    }
+
     public override string Add(User entity){
         var users = GetCollection();
         if (users.Find(x => x.Username == entity.Username).Any()){
@@ -19,7 +25,7 @@
 
     public User FindByUsername(string username){
         var database = base.GetDatabase();
-        var collection = database.GetCollection<User>("users.net");
+        var collection = database.GetCollection<User>("users");
 
         var filter = Builders<User>.Filter.And(
             Builders<User>.Filter.Eq(user => user.Username, username)
@@ -31,12 +37,12 @@
     public override IMongoCollection<User> GetCollection()
     {
         var database = base.GetDatabase();
-        var collection = database.GetCollection<User>("users.net");
+        var collection = database.GetCollection<User>("users");
         return collection;
     }
 
     public override string GetCollectionName()
     {
-        return "users";
+        return "dbUsuarios";
     }
 }
Index: ../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Reflection;\r\n\r\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"LoginApi\")]\r\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\r\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"1.0.0.0\")]\r\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"1.0.0+3d1356fce4746fd3c93067e1acdc5c7a8767a582\")]\r\n[assembly: System.Reflection.AssemblyProductAttribute(\"LoginApi\")]\r\n[assembly: System.Reflection.AssemblyTitleAttribute(\"LoginApi\")]\r\n[assembly: System.Reflection.AssemblyVersionAttribute(\"1.0.0.0\")]\r\n\r\n// Generated by the MSBuild WriteCodeFragment class.\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs b/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs
--- a/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs	(date 1715094766337)
@@ -13,7 +13,7 @@
 [assembly: System.Reflection.AssemblyCompanyAttribute("LoginApi")]
 [assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
 [assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
-[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+3d1356fce4746fd3c93067e1acdc5c7a8767a582")]
+[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+e8033849829168a6329c98b83b04dd2e487f280a")]
 [assembly: System.Reflection.AssemblyProductAttribute("LoginApi")]
 [assembly: System.Reflection.AssemblyTitleAttribute("LoginApi")]
 [assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"22ce43c3-e489-4376-a13d-52e70729c0f9\" name=\"Changes\" comment=\"Añadido todo el soporte JPA\">\r\n      <change afterPath=\"$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/Controllers/UsersController.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/Controllers/UsersController.cs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.dll\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.dll\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.exe\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.exe\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.pdb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.pdb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.dll\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.dll\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.pdb\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.pdb\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/apphost.exe\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/apphost.exe\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/ref/LoginApi.dll\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/ref/LoginApi.dll\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/refint/LoginApi.dll\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/refint/LoginApi.dll\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../pasarela/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../pasarela/pom.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/PasarelaApplication.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/PasarelaApplication.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/rest/ControladorPasarela.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/rest/ControladorPasarela.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../pasarela/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../pasarela/src/main/resources/application.properties\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../pasarela/src/main/resources/application.yml\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../pasarela/src/test/java/com/arso/pasarela/PasarelaApplicationTests.java\" beforeDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;FreddyH124&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/FreddyH124/mircoserviciosARSO.git&quot;,\r\n    &quot;accountId&quot;: &quot;83a96692-a8d4-4a77-bf2f-0cc1654fe9d9&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;customColor&quot;: &quot;&quot;,\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2cgcGryaWqY4ReJlNlE26LDsQ7s\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.ProgramEjercicio1.executor\": \"Debug\",\r\n    \"Application.ProgramEjercicio2.executor\": \"Run\",\r\n    \"Maven. [org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate].executor\": \"Run\",\r\n    \"Maven.alquileres [clean].executor\": \"Run\",\r\n    \"Maven.alquileres [install].executor\": \"Run\",\r\n    \"Maven.alquileres [org.eclipse.jetty:jetty-maven-plugin:10.0.18:run].executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/herna/OneDrive/Escritorio/EnOneDrive/UNIVERSIDAD/UNIVERSIDAD23-24/ARSO/mircoserviciosARSO/estaciones\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"settings.editor.selected.configurable\": \"preferences.lookFeel\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\alquileres\\src\\main\\resources\" />\r\n      <recent name=\"C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\alquileres\\src\\main\\java\\org\\arso\\persistence\" />\r\n      <recent name=\"C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\alquileres\\src\\main\\java\\org\\arso\\repository\" />\r\n      <recent name=\"C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\alquileres\\src\\main\\java\\org\\arso\\interfaces\" />\r\n      <recent name=\"C:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\alquileres\\src\\main\\java\\org\\arso\\services\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"org.arso.utils\" />\r\n      <recent name=\"org.arso.services.factory\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.ProgramEjercicio2\">\r\n    <configuration name=\"ProgramEjercicio1\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.arso.tests.ProgramEjercicio1\" />\r\n      <module name=\"alquileres\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.arso.tests.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ProgramEjercicio2\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"org.arso.tests.ProgramEjercicio2\" />\r\n      <module name=\"alquileres\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"org.arso.tests.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.ProgramEjercicio2\" />\r\n        <item itemvalue=\"Application.ProgramEjercicio1\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.15989.150\" />\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-91d5c284f522-JavaScript-IU-241.15989.150\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"22ce43c3-e489-4376-a13d-52e70729c0f9\" name=\"Changes\" comment=\"\" />\r\n      <created>1708536574415</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1708536574415</updated>\r\n      <workItem from=\"1708536575566\" duration=\"3691000\" />\r\n      <workItem from=\"1708623308291\" duration=\"2573000\" />\r\n      <workItem from=\"1709572223334\" duration=\"1629000\" />\r\n      <workItem from=\"1709574957430\" duration=\"142000\" />\r\n      <workItem from=\"1709575228225\" duration=\"5280000\" />\r\n      <workItem from=\"1709653964970\" duration=\"4494000\" />\r\n      <workItem from=\"1709716607975\" duration=\"4258000\" />\r\n      <workItem from=\"1709721687109\" duration=\"1245000\" />\r\n      <workItem from=\"1709748559381\" duration=\"5769000\" />\r\n      <workItem from=\"1709836036955\" duration=\"814000\" />\r\n      <workItem from=\"1709980140067\" duration=\"1827000\" />\r\n      <workItem from=\"1714813128474\" duration=\"372000\" />\r\n      <workItem from=\"1714813816257\" duration=\"19000\" />\r\n      <workItem from=\"1715010043409\" duration=\"642000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"initial commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1708536685503</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708536685503</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Modelo del dominio\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1708543827621</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1708543827621</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Terminado todo lo referente al ejercicio uno, solo a falta de implementar el programa de prueba, y probarlo\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709580488925</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709580488925</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Creado programa de prueba, y arreglado algunos errores relacionados con saber cuando hay una reserva o alquiler activo\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1709657309456</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1709657309456</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"soporteJPA\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"initial commit\" />\r\n    <MESSAGE value=\"Modelo del dominio\" />\r\n    <MESSAGE value=\"Terminado todo lo referente al ejercicio uno, solo a falta de implementar el programa de prueba, y probarlo\" />\r\n    <MESSAGE value=\"Creado programa de prueba, y arreglado algunos errores relacionados con saber cuando hay una reserva o alquiler activo\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Creado programa de prueba, y arreglado algunos errores relacionados con saber cuando hay una reserva o alquiler activo\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/org/arso/repository/RepositorioUsuarios.java</url>\r\n          <line>12</line>\r\n          <option name=\"timeStamp\" value=\"17\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/org/arso/repository/jpa/RepositorioJPA.java</url>\r\n          <line>40</line>\r\n          <option name=\"timeStamp\" value=\"28\" />\r\n        </line-breakpoint>\r\n        <line-breakpoint enabled=\"true\" type=\"java-method\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/org/arso/services/ServicioAlquileres.java</url>\r\n          <line>59</line>\r\n          <properties class=\"org.arso.services.ServicioAlquileres\" method=\"confirmarReserva\">\r\n            <option name=\"EMULATED\" value=\"true\" />\r\n            <option name=\"WATCH_EXIT\" value=\"false\" />\r\n          </properties>\r\n          <option name=\"timeStamp\" value=\"30\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/.idea/workspace.xml	(date 1715167476198)
@@ -5,25 +5,84 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="22ce43c3-e489-4376-a13d-52e70729c0f9" name="Changes" comment="Añadido todo el soporte JPA">
-      <change afterPath="$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../LoginApi/Controllers/UsersController.cs" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/Controllers/UsersController.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/inspectionProfiles/Project_Default.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Dockerfile" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/IJwtService.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/arso/model/DTO/UsuarioResumenDTO.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/arso/model/Rol.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/org/arso/services/JwtService.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/../estaciones/Dockerfile" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/config/EntidadNoEncontradaHandler.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/config/ExpiredJwtExceptionHandler.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/repository/EntidadNoEncontrada.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/../pasarela/Dockerfile" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../LoginApi/Models/MongoRepository.cs" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/Models/MongoRepository.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../LoginApi/Models/SignUpCodesRepository.cs" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/Models/SignUpCodesRepository.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../LoginApi/Models/UsersRepositorio.cs" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/Models/UsersRepositorio.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../LoginApi/Program.cs" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/Program.cs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.dll" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.dll" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.exe" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.exe" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.pdb" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/bin/Debug/net6.0/LoginApi.pdb" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfo.cs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.AssemblyInfoInputs.cache" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.GeneratedMSBuildEditorConfig.editorconfig" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.GeneratedMSBuildEditorConfig.editorconfig" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.assets.cache" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.assets.cache" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.dll" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.dll" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.pdb" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.pdb" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/apphost.exe" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/apphost.exe" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/ref/LoginApi.dll" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/ref/LoginApi.dll" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/refint/LoginApi.dll" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/Debug/net6.0/refint/LoginApi.dll" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../pasarela/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../pasarela/pom.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/PasarelaApplication.java" beforeDir="false" afterPath="$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/PasarelaApplication.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/rest/ControladorPasarela.java" beforeDir="false" afterPath="$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/rest/ControladorPasarela.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../LoginApi/obj/LoginApi.csproj.nuget.dgspec.json" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/LoginApi.csproj.nuget.dgspec.json" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../LoginApi/obj/project.nuget.cache" beforeDir="false" afterPath="$PROJECT_DIR$/../LoginApi/obj/project.nuget.cache" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/pom.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/auth/ControladorAuth.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/auth/JwtTokenFilter.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/auth/JwtTokenFilter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/factory/FactoriaRepositorios.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/factory/FactoriaRepositorios.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/repository/IRepositorio.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/IRepositorio.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/repository/IRepositorioString.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/IRepositorioString.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/services/IServicioAlquileres.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/IServicioAlquileres.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/services/IServicioEstaciones.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/IServicioEstaciones.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/interfaces/services/IServicioUsuarios.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/model/Usuario.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/model/Usuario.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/repository/jpa/RepositorioJPA.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/repository/jpa/RepositorioJPA.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/repository/onmemory/RepositorioMemoria.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/repository/onmemory/RepositorioMemoria.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/rest/ControladorRest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/rest/ControladorRest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/services/ServicioAlquileres.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/services/ServicioAlquileres.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/services/ServicioEstaciones.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/services/ServicioEstaciones.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/services/ServicioUsuarios.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/tests/ProgramEjercicio1.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/tests/ProgramEjercicio1.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/arso/tests/ProgramEjercicio2.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/arso/tests/ProgramEjercicio2.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/META-INF/persistence.xml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/META-INF/persistence.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/resources/servicios.properties" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/servicios.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/auth/AuthResponse.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/auth/ControladorAuth.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/auth/JWTTokenFilter.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/auth/JWTTokenFilter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/communication/ConsumidorEventos.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/communication/ConsumidorEventos.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/communication/IConsumidorEventos.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/communication/IConsumidorEventos.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/config/ApplicationConfig.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/config/SecurityConfiguration.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/config/SecurityConfiguration.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IJwtService.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IJwtService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioBicicletas.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioBicicletas.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioUsuarios.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioUsuarios.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioAuth.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioEstaciones.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioEstaciones.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/model/CustomUserDetails.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaBicicletaDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaBicicletaDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaEstacionDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaEstacionDTO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/model/Usuario.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/model/Usuario.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioBicicletas.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioBicicletas.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioUsuarios.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioUsuarios.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/rest/ControladorEstaciones.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/rest/ControladorEstaciones.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/service/JwtService.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/service/JwtService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/service/ServicioAuth.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/service/ServicioEstaciones.java" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/service/ServicioEstaciones.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/test/BusEventos.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/java/com/arso/estaciones/test/TestJWT.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/../estaciones/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/../estaciones/src/main/resources/application.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java" beforeDir="false" afterPath="$PROJECT_DIR$/../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/../pasarela/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/../pasarela/src/main/resources/application.properties" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../pasarela/src/main/resources/application.yml" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/../pasarela/src/test/java/com/arso/pasarela/PasarelaApplicationTests.java" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -33,6 +92,7 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
+        <option value="Dockerfile" />
         <option value="Interface" />
         <option value="Class" />
       </list>
@@ -68,33 +128,34 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Application.ProgramEjercicio1.executor": "Debug",
-    "Application.ProgramEjercicio2.executor": "Run",
-    "Maven. [org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate].executor": "Run",
-    "Maven.alquileres [clean].executor": "Run",
-    "Maven.alquileres [install].executor": "Run",
-    "Maven.alquileres [org.eclipse.jetty:jetty-maven-plugin:10.0.18:run].executor": "Run",
-    "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "master",
-    "ignore.virus.scanning.warn.message": "true",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "C:/Users/herna/OneDrive/Escritorio/EnOneDrive/UNIVERSIDAD/UNIVERSIDAD23-24/ARSO/mircoserviciosARSO/estaciones",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Modules",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.0",
-    "settings.editor.selected.configurable": "preferences.lookFeel",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Application.ProgramEjercicio1.executor&quot;: &quot;Debug&quot;,
+    &quot;Application.ProgramEjercicio2.executor&quot;: &quot;Run&quot;,
+    &quot;Maven. [org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate].executor&quot;: &quot;Run&quot;,
+    &quot;Maven.alquileres [clean].executor&quot;: &quot;Run&quot;,
+    &quot;Maven.alquileres [install].executor&quot;: &quot;Run&quot;,
+    &quot;Maven.alquileres [org.eclipse.jetty:jetty-maven-plugin:10.0.18:run].executor&quot;: &quot;Run&quot;,
+    &quot;Maven.alquileres [package].executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/herna/OneDrive/Escritorio/EnOneDrive/UNIVERSIDAD/UNIVERSIDAD23-24/ARSO/mircoserviciosARSO/pasarela&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
       <recent name="C:\Users\herna\OneDrive\Escritorio\EnOneDrive\UNIVERSIDAD\UNIVERSIDAD23-24\ARSO\alquileres\src\main\resources" />
@@ -103,7 +164,11 @@
       <recent name="C:\Users\herna\OneDrive\Escritorio\EnOneDrive\UNIVERSIDAD\UNIVERSIDAD23-24\ARSO\alquileres\src\main\java\org\arso\interfaces" />
       <recent name="C:\Users\herna\OneDrive\Escritorio\EnOneDrive\UNIVERSIDAD\UNIVERSIDAD23-24\ARSO\alquileres\src\main\java\org\arso\services" />
     </key>
+    <key name="MoveFile.RECENT_KEYS">
+      <recent name="C:\Users\herna\OneDrive\Escritorio\EnOneDrive\UNIVERSIDAD\UNIVERSIDAD23-24\ARSO\mircoserviciosARSO\alquileres" />
+    </key>
     <key name="CopyClassDialog.RECENTS_KEY">
+      <recent name="org.arso.model" />
       <recent name="org.arso.utils" />
       <recent name="org.arso.services.factory" />
     </key>
@@ -172,6 +237,10 @@
       <workItem from="1714813128474" duration="372000" />
       <workItem from="1714813816257" duration="19000" />
       <workItem from="1715010043409" duration="642000" />
+      <workItem from="1715093944355" duration="3000" />
+      <workItem from="1715094095468" duration="2626000" />
+      <workItem from="1715097602926" duration="4741000" />
+      <workItem from="1715152435639" duration="9251000" />
     </task>
     <task id="LOCAL-00001" summary="initial commit">
       <option name="closed" value="true" />
@@ -222,7 +291,7 @@
                   <entry key="branch">
                     <value>
                       <list>
-                        <option value="soporteJPA" />
+                        <option value="origin/master" />
                       </list>
                     </value>
                   </entry>
Index: ../estaciones/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/Dockerfile b/../estaciones/Dockerfile
new file mode 100644
--- /dev/null	(date 1715100995515)
+++ b/../estaciones/Dockerfile	(date 1715100995515)
@@ -0,0 +1,13 @@
+FROM maven:3.8.5-jdk-8 AS builder
+
+WORKDIR /app/
+COPY pom.xml .
+RUN mvn -e -B dependency:resolve
+COPY src ./src
+RUN mvn package
+
+FROM openjdk:8
+COPY --from=builder /app/target/estaciones-0.0.1-SNAPSHOT.jar /root.jar
+CMD ["java", "-jar", "/root.jar"]
+
+EXPOSE 8081
\ No newline at end of file
Index: ../estaciones/src/main/java/com/arso/estaciones/rest/ControladorEstaciones.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.rest;\r\n\r\nimport com.arso.estaciones.interfaces.IServicioEstaciones;\r\nimport com.arso.estaciones.model.DTO.*;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.Parameter;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.web.PagedResourcesAssembler;\r\nimport org.springframework.hateoas.EntityModel;\r\nimport org.springframework.hateoas.PagedModel;\r\nimport org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.access.prepost.PreAuthorize;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\r\n\r\nimport javax.validation.Valid;\r\nimport java.net.URI;\r\n\r\n@RestController\r\n@RequestMapping(\"estaciones\")\r\n@Tag(name = \"Estaciones\", description = \"API para operaciones relacionadas con estaciones de bicicletas\")\r\npublic class ControladorEstaciones {\r\n    private IServicioEstaciones servicioEstaciones;\r\n    @Autowired\r\n    private PagedResourcesAssembler<BicicletaDTO> pagedBicicletaResourcesAssembler;\r\n    @Autowired\r\n    private PagedResourcesAssembler<EstacionDTO> pagedEstacionResourcesAssembler;\r\n\r\n    @Autowired\r\n    public ControladorEstaciones(IServicioEstaciones servicioEstaciones) {\r\n        this.servicioEstaciones = servicioEstaciones;\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Dar de alta una estación\",\r\n            description = \"Crea una nueva estación con la información proporcionada en el DTO.\"\r\n    )\r\n    @PreAuthorize(\"hasAuthority('GESTOR')\")\r\n    @PostMapping(value = \"/alta\")\r\n    public ResponseEntity<Void> altaEstacion(@Valid @RequestBody AltaEstacionDTO dto) {\r\n        String id = servicioEstaciones.altaEstacion(dto);\r\n        URI url = ServletUriComponentsBuilder.fromCurrentRequest()\r\n                .path(\"/{id}\").buildAndExpand(id).toUri();\r\n\r\n        return ResponseEntity.created(url).build();\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Dar de alta bicicletas\",\r\n            description = \"Da de alta una bicicletas en la estación especificada.\"\r\n    )\r\n    @PreAuthorize(\"hasAuthority('GESTOR')\")\r\n    @PostMapping(\"/bicicletas/alta\")\r\n    public ResponseEntity<Void> altaBicicletas(@Valid @RequestBody AltaBicicletaDTO dto) {\r\n        String id = servicioEstaciones.altaBicicleta(dto);\r\n        URI url = ServletUriComponentsBuilder.fromCurrentRequest()\r\n                .path(\"/{id}\").buildAndExpand(id).toUri();\r\n\r\n        return ResponseEntity.created(url).build();\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Dar de baja una bicicleta\",\r\n            description = \"Da de baja una bicicleta en la estación especificada.\"\r\n    )\r\n    @PreAuthorize(\"hasAuthority('GESTOR')\")\r\n    @PostMapping(\"/bicicletas/{id}/baja\")\r\n    public ResponseEntity<Void> bajaBicicleta(\r\n            @Parameter(description = \"ID de la bicicleta\", example = \"660ee344ef8055670e95a1bb\") @PathVariable String id,\r\n            @Parameter(description = \"Motivo de la baja\", example = \"Mantenimiento\") @RequestParam String motivo) {\r\n\r\n        servicioEstaciones.bajaBicicleta(id, motivo);\r\n        return ResponseEntity.ok().build();\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Obtener bicicletas por estación\",\r\n            description = \"Obtiene todas las bicicletas asociadas a la estación especificada.\"\r\n    )\r\n    @PreAuthorize(\"hasAuthority('GESTOR')\")\r\n    @GetMapping(\"/{id}/bicicletas\")\r\n    public PagedModel<EntityModel<BicicletaDTO>> getBicicletasByEstacion(\r\n            @Parameter(description = \"ID de la estación\", example = \"6616cee50a78571ff80a8ff3\") @PathVariable String id,\r\n            Pageable pageable) {\r\n        Page<BicicletaDTO> result = servicioEstaciones.getAllBiciletas(id, pageable);\r\n        return pagedBicicletaResourcesAssembler.toModel(result, bicicletaDTO -> {\r\n            EntityModel<BicicletaDTO> model = EntityModel.of(bicicletaDTO);\r\n            try {\r\n                model.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\r\n                                .methodOn(ControladorEstaciones.class)\r\n                                .bajaBicicleta(bicicletaDTO.getId(), \"\"))\r\n                        .withRel(\"baja\"));\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n            return model;\r\n        });\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Obtener todas las estaciones\",\r\n            description = \"Obtiene todas las estaciones disponibles.\"\r\n    )\r\n    @PreAuthorize(\"hasAnyAuthority('GESTOR','NORMAL')\")\r\n    @GetMapping()\r\n    public PagedModel<EntityModel<EstacionDTO>> getEstaciones(Pageable pageable) {\r\n        Page<EstacionDTO> result = servicioEstaciones.getAllEstaciones(pageable);\r\n        return pagedEstacionResourcesAssembler.toModel(result, estacionDto -> {\r\n            EntityModel<EstacionDTO> model = EntityModel.of(estacionDto);\r\n            try {\r\n                model.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\r\n                                .methodOn(ControladorEstaciones.class)\r\n                                .getEstacionById(estacionDto.getId()))\r\n                        .withSelfRel());\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n            return model;\r\n        });\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Obtener una estación por ID\",\r\n            description = \"Obtiene la información detallada de una estación por su ID.\"\r\n    )\r\n    @PreAuthorize(\"hasAnyAuthority('GESTOR','NORMAL')\")\r\n    @GetMapping(\"/{id}\")\r\n    public EntityModel<EstacionDTO> getEstacionById(\r\n            @Parameter(description = \"ID de la estación\", example = \"6616cee50a78571ff80a8ff3\") @PathVariable String id) {\r\n        EstacionDTO dto = servicioEstaciones.getEstacion(id);\r\n\r\n        EntityModel<EstacionDTO> model =  EntityModel.of(dto);\r\n        model.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\r\n                        .methodOn(ControladorEstaciones.class)\r\n                        .getEstacionById(id))\r\n                .withSelfRel());\r\n        return model;\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Obtener bicicletas disponibles por estación\",\r\n            description = \"Obtiene todas las bicicletas disponibles asociadas a la estación especificada.\"\r\n    )\r\n    @PreAuthorize(\"hasAnyAuthority('GESTOR','NORMAL')\")\r\n    @GetMapping(\"/{id}/bicicletas/disponibles\")\r\n    public PagedModel<EntityModel<BicicletaDTO>> getBicicletasDisponiblesByEstacion(\r\n            @Parameter(description = \"ID de la estación\", example = \"6616cee50a78571ff80a8ff3\") @PathVariable String id, Pageable pageable) {\r\n        Page<BicicletaDTO> result = servicioEstaciones.getBicicletasDisponibles(id, pageable);\r\n        return pagedBicicletaResourcesAssembler.toModel(result, bicicletaDTO -> {\r\n            EntityModel<BicicletaDTO> model = EntityModel.of(bicicletaDTO);\r\n            try {\r\n                model.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder\r\n                                .methodOn(ControladorEstaciones.class)\r\n                                .getEstacionById(bicicletaDTO.getId()))\r\n                        .withSelfRel());\r\n            }catch (Exception e){\r\n                e.printStackTrace();\r\n            }\r\n            return model;\r\n        });\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Estacionar bicicleta\",\r\n            description = \"Estaciona una bicicleta en la estación especificada.\"\r\n    )\r\n    @PostMapping(\"/estacionar\")\r\n    public ResponseEntity<Void> estacionar(@Valid @RequestBody EstacionarBicicletaDTO dto) {\r\n        servicioEstaciones.estacionarBicicleta(dto);\r\n        return ResponseEntity.ok().build();\r\n    }\r\n\r\n    @Operation(\r\n            summary = \"Retirar bicicleta\",\r\n            description = \"Retira una bicicleta de la estación especificada\"\r\n    )\r\n    @PostMapping(\"/bicicletas/retirar/{idBicicleta}\")\r\n    public ResponseEntity<Void> retirar(\r\n            @Parameter(description = \"ID de la bicicleta\", example = \"6616cee50a78571ff80a8ff3\") @PathVariable String idBicicleta) {\r\n        servicioEstaciones.retirarBicicleta(idBicicleta);\r\n        return ResponseEntity.ok().build();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/rest/ControladorEstaciones.java b/../estaciones/src/main/java/com/arso/estaciones/rest/ControladorEstaciones.java
--- a/../estaciones/src/main/java/com/arso/estaciones/rest/ControladorEstaciones.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/rest/ControladorEstaciones.java	(date 1715167029274)
@@ -2,6 +2,7 @@
 
 import com.arso.estaciones.interfaces.IServicioEstaciones;
 import com.arso.estaciones.model.DTO.*;
+import com.arso.estaciones.repository.EntidadNoEncontrada;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.tags.Tag;
@@ -41,12 +42,15 @@
     )
     @PreAuthorize("hasAuthority('GESTOR')")
     @PostMapping(value = "/alta")
-    public ResponseEntity<Void> altaEstacion(@Valid @RequestBody AltaEstacionDTO dto) {
+    public ResponseEntity<URI> altaEstacion(@Valid @RequestBody AltaEstacionDTO dto) {
         String id = servicioEstaciones.altaEstacion(dto);
-        URI url = ServletUriComponentsBuilder.fromCurrentRequest()
-                .path("/{id}").buildAndExpand(id).toUri();
+        URI url = ServletUriComponentsBuilder
+                .fromCurrentRequest()
+                .path("/{id}")
+                .buildAndExpand(id)
+                .toUri();
 
-        return ResponseEntity.created(url).build();
+        return ResponseEntity.created(url).body(url);
     }
 
     @Operation(
@@ -55,12 +59,12 @@
     )
     @PreAuthorize("hasAuthority('GESTOR')")
     @PostMapping("/bicicletas/alta")
-    public ResponseEntity<Void> altaBicicletas(@Valid @RequestBody AltaBicicletaDTO dto) {
+    public ResponseEntity<URI> altaBicicletas(@Valid @RequestBody AltaBicicletaDTO dto) throws EntidadNoEncontrada {
         String id = servicioEstaciones.altaBicicleta(dto);
         URI url = ServletUriComponentsBuilder.fromCurrentRequest()
                 .path("/{id}").buildAndExpand(id).toUri();
 
-        return ResponseEntity.created(url).build();
+        return ResponseEntity.created(url).body(url);
     }
 
     @Operation(
@@ -71,10 +75,10 @@
     @PostMapping("/bicicletas/{id}/baja")
     public ResponseEntity<Void> bajaBicicleta(
             @Parameter(description = "ID de la bicicleta", example = "660ee344ef8055670e95a1bb") @PathVariable String id,
-            @Parameter(description = "Motivo de la baja", example = "Mantenimiento") @RequestParam String motivo) {
+            @Parameter(description = "Motivo de la baja", example = "Mantenimiento") @RequestParam String motivo) throws EntidadNoEncontrada {
 
         servicioEstaciones.bajaBicicleta(id, motivo);
-        return ResponseEntity.ok().build();
+        return ResponseEntity.noContent().build();
     }
 
     @Operation(
@@ -86,7 +90,10 @@
     public PagedModel<EntityModel<BicicletaDTO>> getBicicletasByEstacion(
             @Parameter(description = "ID de la estación", example = "6616cee50a78571ff80a8ff3") @PathVariable String id,
             Pageable pageable) {
-        Page<BicicletaDTO> result = servicioEstaciones.getAllBiciletas(id, pageable);
+        Page<BicicletaDTO> result = servicioEstaciones.getAllBiciletas(id, pageable).map(bicicleta -> {
+            BicicletaDTO dto =DTOHelper.fromEntity(bicicleta);
+            return dto;
+        });
         return pagedBicicletaResourcesAssembler.toModel(result, bicicletaDTO -> {
             EntityModel<BicicletaDTO> model = EntityModel.of(bicicletaDTO);
             try {
@@ -108,7 +115,11 @@
     @PreAuthorize("hasAnyAuthority('GESTOR','NORMAL')")
     @GetMapping()
     public PagedModel<EntityModel<EstacionDTO>> getEstaciones(Pageable pageable) {
-        Page<EstacionDTO> result = servicioEstaciones.getAllEstaciones(pageable);
+        Page<EstacionDTO> result = servicioEstaciones.getAllEstaciones(pageable).map(estacion -> {
+            EstacionDTO dto =DTOHelper.fromEntity(estacion);
+            return dto;
+        });
+
         return pagedEstacionResourcesAssembler.toModel(result, estacionDto -> {
             EntityModel<EstacionDTO> model = EntityModel.of(estacionDto);
             try {
@@ -130,8 +141,8 @@
     @PreAuthorize("hasAnyAuthority('GESTOR','NORMAL')")
     @GetMapping("/{id}")
     public EntityModel<EstacionDTO> getEstacionById(
-            @Parameter(description = "ID de la estación", example = "6616cee50a78571ff80a8ff3") @PathVariable String id) {
-        EstacionDTO dto = servicioEstaciones.getEstacion(id);
+            @Parameter(description = "ID de la estación", example = "6616cee50a78571ff80a8ff3") @PathVariable String id) throws EntidadNoEncontrada {
+        EstacionDTO dto = DTOHelper.fromEntity(servicioEstaciones.getEstacion(id));
 
         EntityModel<EstacionDTO> model =  EntityModel.of(dto);
         model.add(WebMvcLinkBuilder.linkTo(WebMvcLinkBuilder
@@ -149,7 +160,11 @@
     @GetMapping("/{id}/bicicletas/disponibles")
     public PagedModel<EntityModel<BicicletaDTO>> getBicicletasDisponiblesByEstacion(
             @Parameter(description = "ID de la estación", example = "6616cee50a78571ff80a8ff3") @PathVariable String id, Pageable pageable) {
-        Page<BicicletaDTO> result = servicioEstaciones.getBicicletasDisponibles(id, pageable);
+        Page<BicicletaDTO> result = servicioEstaciones.getBicicletasDisponibles(id, pageable).map(bicicleta -> {
+            BicicletaDTO dto =DTOHelper.fromEntity(bicicleta);
+            return dto;
+        });
+
         return pagedBicicletaResourcesAssembler.toModel(result, bicicletaDTO -> {
             EntityModel<BicicletaDTO> model = EntityModel.of(bicicletaDTO);
             try {
@@ -168,10 +183,10 @@
             summary = "Estacionar bicicleta",
             description = "Estaciona una bicicleta en la estación especificada."
     )
-    @PostMapping("/estacionar")
-    public ResponseEntity<Void> estacionar(@Valid @RequestBody EstacionarBicicletaDTO dto) {
+    @PostMapping("/estacionadas/nuevo")
+    public ResponseEntity<Void> estacionar(@Valid @RequestBody EstacionarBicicletaDTO dto) throws EntidadNoEncontrada {
         servicioEstaciones.estacionarBicicleta(dto);
-        return ResponseEntity.ok().build();
+        return ResponseEntity.noContent().build();
     }
 
     @Operation(
@@ -180,9 +195,9 @@
     )
     @PostMapping("/bicicletas/retirar/{idBicicleta}")
     public ResponseEntity<Void> retirar(
-            @Parameter(description = "ID de la bicicleta", example = "6616cee50a78571ff80a8ff3") @PathVariable String idBicicleta) {
+            @Parameter(description = "ID de la bicicleta", example = "6616cee50a78571ff80a8ff3") @PathVariable String idBicicleta) throws EntidadNoEncontrada {
         servicioEstaciones.retirarBicicleta(idBicicleta);
-        return ResponseEntity.ok().build();
+        return ResponseEntity.noContent().build();
     }
 
 }
Index: ../estaciones/src/main/java/com/arso/estaciones/auth/JWTTokenFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.auth;\r\n\r\nimport com.arso.estaciones.service.JwtService;\r\nimport com.arso.estaciones.model.Usuario;\r\nimport com.mongodb.lang.NonNull;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\r\nimport org.springframework.stereotype.Component;\r\nimport org.springframework.web.filter.OncePerRequestFilter;\r\n\r\nimport javax.servlet.FilterChain;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\n\r\n@Component\r\n@RequiredArgsConstructor()\r\npublic class JWTTokenFilter extends OncePerRequestFilter {\r\n\r\n    private final JwtService jwtService;\r\n\r\n    private final UserDetailsService servicioUsuarios;\r\n\r\n    @Override\r\n    protected void doFilterInternal(@NonNull HttpServletRequest request,\r\n                                    @NonNull HttpServletResponse response,\r\n                                    @NonNull FilterChain filterChain)\r\n            throws ServletException, IOException {\r\n        final String authorizationHeader = request.getHeader(\"Authorization\");\r\n        final String jwtToken;\r\n        String userId;\r\n        if (authorizationHeader == null || !authorizationHeader.startsWith(\"Bearer \")) {\r\n            filterChain.doFilter(request, response);\r\n            return;\r\n        }\r\n\r\n        jwtToken = authorizationHeader.substring(7);\r\n        userId = jwtService.extractUsername(jwtToken);\r\n\r\n        if(userId != null && SecurityContextHolder.getContext().getAuthentication() == null) {\r\n            UserDetails userDetails = servicioUsuarios.loadUserByUsername(userId);\r\n            if(jwtService.validateToken(jwtToken, userDetails)){\r\n                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(\r\n                        userDetails,\r\n                        null,\r\n                        userDetails.getAuthorities()\r\n                );\r\n                authToken.setDetails(\r\n                        new WebAuthenticationDetailsSource().buildDetails(request)\r\n                );\r\n                SecurityContextHolder.getContext().setAuthentication(authToken);\r\n            }\r\n        }\r\n        filterChain.doFilter(request, response);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/auth/JWTTokenFilter.java b/../estaciones/src/main/java/com/arso/estaciones/auth/JWTTokenFilter.java
--- a/../estaciones/src/main/java/com/arso/estaciones/auth/JWTTokenFilter.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/auth/JWTTokenFilter.java	(date 1715152905701)
@@ -1,10 +1,14 @@
 package com.arso.estaciones.auth;
 
+import com.arso.estaciones.model.Rol;
 import com.arso.estaciones.service.JwtService;
 import com.arso.estaciones.model.Usuario;
 import com.mongodb.lang.NonNull;
+import io.jsonwebtoken.Claims;
 import lombok.RequiredArgsConstructor;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
 import org.springframework.security.core.context.SecurityContextHolder;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;
@@ -17,6 +21,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
 
 @Component
 @RequiredArgsConstructor()
@@ -31,7 +37,39 @@
                                     @NonNull HttpServletResponse response,
                                     @NonNull FilterChain filterChain)
             throws ServletException, IOException {
-        final String authorizationHeader = request.getHeader("Authorization");
+
+        String token = request.getHeader("Authorization");
+        if (token != null && token.startsWith("Bearer ")) {
+            token = token.substring(7);
+            Claims claims = jwtService.extractAllClaims(token);
+            String username = claims.getSubject();
+
+
+            int role = Integer.valueOf(claims.get("rol").toString());
+            Rol rol = null;
+
+            switch (role) {
+                case -1:
+                    rol = Rol.GESTOR;
+                    break;
+                case 0:
+                    rol = Rol.NORMAL;
+                    break;
+                default:
+                    throw new IllegalArgumentException("Valor de rol desconocido: " + role);
+            }
+
+            List<GrantedAuthority> authorities = new ArrayList<>();
+            authorities.add(new SimpleGrantedAuthority(rol.name()));
+
+            UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(username, null, authorities);
+            SecurityContextHolder.getContext().setAuthentication(auth);
+        }
+        filterChain.doFilter(request, response);
+
+
+
+        /*final String authorizationHeader = request.getHeader("Authorization");
         final String jwtToken;
         String userId;
         if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
@@ -56,6 +94,6 @@
                 SecurityContextHolder.getContext().setAuthentication(authToken);
             }
         }
-        filterChain.doFilter(request, response);
+        filterChain.doFilter(request, response);*/
     }
 }
Index: ../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaEstacionDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.model.DTO;\r\n\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport javax.validation.constraints.NotBlank;\r\nimport javax.validation.constraints.NotEmpty;\r\nimport javax.validation.constraints.NotNull;\r\n\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Schema(description = \"DTO del alta de las estaciones\")\r\npublic class AltaEstacionDTO {\r\n    @Schema(description = \"Nombre de la estación\", example = \"Estación Central\")\r\n    @NotNull\r\n    @NotEmpty\r\n    private String nombre;\r\n    @Schema(description = \"Número de puestos en la estación\", example = \"20\")\r\n    @NotNull\r\n    private int puestos;\r\n    @Schema(description = \"Dirección de la estación\", example = \"Calle Principal 123\")\r\n    @NotNull\r\n    @NotEmpty\r\n    private String direccion;\r\n    @Schema(description = \"Latitud de la estación\", example = \"40.7128\")\r\n    @NotNull\r\n    private double lat;\r\n    @Schema(description = \"Longitud de la estación\", example = \"-74.0060\")\r\n    @NotNull\r\n    private double lng;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaEstacionDTO.java b/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaEstacionDTO.java
--- a/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaEstacionDTO.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaEstacionDTO.java	(date 1715165172702)
@@ -9,6 +9,7 @@
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Positive;
 
 @Data
 @Builder
@@ -22,6 +23,7 @@
     private String nombre;
     @Schema(description = "Número de puestos en la estación", example = "20")
     @NotNull
+    @Positive(message = "El número de puestos debe ser un entero positivo")
     private int puestos;
     @Schema(description = "Dirección de la estación", example = "Calle Principal 123")
     @NotNull
@@ -29,8 +31,10 @@
     private String direccion;
     @Schema(description = "Latitud de la estación", example = "40.7128")
     @NotNull
+    @Positive(message = "La latitud debe ser un valor positivo")
     private double lat;
     @Schema(description = "Longitud de la estación", example = "-74.0060")
     @NotNull
+    @Positive(message = "La longitud debe ser un valor positivo")
     private double lng;
 }
Index: ../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaBicicletaDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.model.DTO;\r\n\r\nimport io.swagger.v3.oas.annotations.media.Schema;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport javax.validation.constraints.NotBlank;\r\nimport javax.validation.constraints.NotNull;\r\n\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Schema(description = \"DTO para dar de alta una bicicleta\")\r\npublic class AltaBicicletaDTO {\r\n    @Schema(description = \"Modelo de la bicicleta\", example = \"Bicicleta de montaña\")\r\n    @NotNull\r\n    @NotBlank\r\n    private String modelo;\r\n    @Schema(description = \"ID de la estación donde se dará de alta la bicicleta\", example = \"6616cee50a78571ff80a8ff3\")\r\n    @NotNull\r\n    @NotBlank\r\n    private String idEstacion;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaBicicletaDTO.java b/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaBicicletaDTO.java
--- a/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaBicicletaDTO.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/model/DTO/AltaBicicletaDTO.java	(date 1715153865611)
@@ -19,7 +19,7 @@
     @NotNull
     @NotBlank
     private String modelo;
-    @Schema(description = "ID de la estación donde se dará de alta la bicicleta", example = "6616cee50a78571ff80a8ff3")
+    @Schema(description = "ID de la estación donde se dará de alta la bicicleta", example = "663b2ad6d295d90b4b0475f6")
     @NotNull
     @NotBlank
     private String idEstacion;
Index: ../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"documents\":{\"c:\\\\Users\\\\herna\\\\OneDrive\\\\Escritorio\\\\EnOneDrive\\\\UNIVERSIDAD\\\\UNIVERSIDAD23-24\\\\ARSO\\\\mircoserviciosARSO\\\\*\":\"https://raw.githubusercontent.com/FreddyH124/mircoserviciosARSO/3d1356fce4746fd3c93067e1acdc5c7a8767a582/*\"}}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json b/../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json
--- a/../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/obj/Debug/net6.0/LoginApi.sourcelink.json	(date 1715094775724)
@@ -1,1 +1,1 @@
-{"documents":{"c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\*":"https://raw.githubusercontent.com/FreddyH124/mircoserviciosARSO/3d1356fce4746fd3c93067e1acdc5c7a8767a582/*"}}
\ No newline at end of file
+{"documents":{"c:\\Users\\herna\\OneDrive\\Escritorio\\EnOneDrive\\UNIVERSIDAD\\UNIVERSIDAD23-24\\ARSO\\mircoserviciosARSO\\*":"https://raw.githubusercontent.com/FreddyH124/mircoserviciosARSO/e8033849829168a6329c98b83b04dd2e487f280a/*"}}
\ No newline at end of file
Index: Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Dockerfile b/Dockerfile
new file mode 100644
--- /dev/null	(date 1715096148148)
+++ b/Dockerfile	(date 1715096148148)
@@ -0,0 +1,15 @@
+FROM maven:3.8.5-jdk-8 AS builder
+
+WORKDIR /app/
+COPY pom.xml .
+RUN mvn -e -B dependency:resolve
+COPY src ./src
+RUN mvn package
+
+FROM tomcat:9-jdk8
+WORKDIR /usr/local/tomcat/webapps/
+COPY --from=builder /app/target/alquileres-1.0-SNAPSHOT.war ROOT.war
+
+EXPOSE 8080
+
+CMD ["catalina.sh", "run"]
\ No newline at end of file
Index: ../estaciones/src/main/java/com/arso/estaciones/model/Usuario.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.model;\r\n\r\nimport com.arso.estaciones.interfaces.IIdentificable;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport org.springframework.data.annotation.Id;\r\nimport org.springframework.data.mongodb.core.mapping.Document;\r\nimport org.springframework.security.core.GrantedAuthority;\r\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\n\r\n@Data\r\n@Builder\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\n@Document(collection = \"usuarios\")\r\npublic class Usuario implements IIdentificable, UserDetails {\r\n    @Id\r\n    private String id;\r\n    private String nombre;\r\n    private String clave;\r\n    private Rol rol;\r\n\r\n    @Override\r\n    public Collection<? extends GrantedAuthority> getAuthorities() {\r\n        List<GrantedAuthority> authorities = new ArrayList<>();\r\n        authorities.add(new SimpleGrantedAuthority(rol.name()));\r\n        return authorities;\r\n    }\r\n\r\n    @Override\r\n    public String getPassword() {\r\n        return clave;\r\n    }\r\n\r\n    @Override\r\n    public String getUsername() {\r\n        return nombre;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonExpired() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonLocked() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isCredentialsNonExpired() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isEnabled() {\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/model/Usuario.java b/../estaciones/src/main/java/com/arso/estaciones/model/Usuario.java
--- a/../estaciones/src/main/java/com/arso/estaciones/model/Usuario.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/model/Usuario.java	(date 1715152905737)
@@ -20,14 +20,14 @@
 @NoArgsConstructor
 @AllArgsConstructor
 @Document(collection = "usuarios")
-public class Usuario implements IIdentificable, UserDetails {
+public class Usuario implements IIdentificable/*, UserDetails*/ {
     @Id
     private String id;
     private String nombre;
     private String clave;
     private Rol rol;
 
-    @Override
+    /*@Override
     public Collection<? extends GrantedAuthority> getAuthorities() {
         List<GrantedAuthority> authorities = new ArrayList<>();
         authorities.add(new SimpleGrantedAuthority(rol.name()));
@@ -62,5 +62,5 @@
     @Override
     public boolean isEnabled() {
         return true;
-    }
+    }*/
 }
Index: ../estaciones/src/main/java/com/arso/estaciones/interfaces/IJwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.interfaces;\r\n\r\nimport io.jsonwebtoken.Claims;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\n\r\nimport java.security.Key;\r\nimport java.util.Date;\r\nimport java.util.Map;\r\nimport java.util.function.Function;\r\n\r\npublic interface IJwtService {\r\n    String extractUsername(String token);\r\n\r\n    Date extractExpiration(String token);\r\n\r\n    <T> T extractClaim(String token, Function<Claims, T> claimsResolver);\r\n\r\n    //Claims extractAllClaims(String token);\r\n\r\n    //Boolean isTokenExpired(String token);\r\n\r\n    Boolean validateToken(String token, UserDetails userDetails);\r\n\r\n    //String generateToken(UserDetails userDetails);\r\n\r\n    //String generateToken(Map<String, Object> extraClaims, UserDetails userDetails);\r\n\r\n    //Key getSignKey();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IJwtService.java b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IJwtService.java
--- a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IJwtService.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IJwtService.java	(date 1715152905719)
@@ -9,17 +9,17 @@
 import java.util.function.Function;
 
 public interface IJwtService {
-    String extractUsername(String token);
+    //String extractUsername(String token);
 
-    Date extractExpiration(String token);
+   //Date extractExpiration(String token);
 
-    <T> T extractClaim(String token, Function<Claims, T> claimsResolver);
+    //<T> T extractClaim(String token, Function<Claims, T> claimsResolver);
 
-    //Claims extractAllClaims(String token);
+    Claims extractAllClaims(String token);
 
     //Boolean isTokenExpired(String token);
 
-    Boolean validateToken(String token, UserDetails userDetails);
+    //Boolean validateToken(String token, UserDetails userDetails);
 
     //String generateToken(UserDetails userDetails);
 
Index: ../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioBicicletas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.interfaces;\r\n\r\nimport com.arso.estaciones.model.Bicicleta;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.mongodb.repository.Query;\r\nimport org.springframework.data.repository.NoRepositoryBean;\r\nimport org.springframework.data.repository.PagingAndSortingRepository;\r\n\r\n@NoRepositoryBean\r\npublic interface IRepositorioBicicletas extends PagingAndSortingRepository<Bicicleta, String> {\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioBicicletas.java b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioBicicletas.java
--- a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioBicicletas.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioBicicletas.java	(date 1715163368625)
@@ -9,5 +9,9 @@
 
 @NoRepositoryBean
 public interface IRepositorioBicicletas extends PagingAndSortingRepository<Bicicleta, String> {
+    @Query("{'estacionActual.id': ?0}")
+    Page<Bicicleta> findByEstacionActualId(String idEstacion, Pageable pageable);
 
+    @Query("{'estacionActual.id': ?0, 'disponible': true}")
+    Page<Bicicleta> findByDisponibleAndEstacionActualId(String idEstacion, Pageable pageable);
 }
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1715152438645)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1715152438645)
@@ -0,0 +1,7 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="ConvertOldAnnotations" enabled="false" level="WARNING" enabled_by_default="false" />
+    <inspection_tool class="StaticInitializerReferencesSubClass" enabled="true" level="WARNING" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
Index: ../estaciones/src/main/java/com/arso/estaciones/service/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.service;\r\n\r\nimport com.arso.estaciones.interfaces.IJwtService;\r\nimport io.jsonwebtoken.Claims;\r\nimport io.jsonwebtoken.Jwts;\r\nimport io.jsonwebtoken.SignatureAlgorithm;\r\nimport io.jsonwebtoken.io.Decoders;\r\nimport io.jsonwebtoken.security.Keys;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.security.Key;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.function.Function;\r\n\r\n@Service\r\npublic class JwtService implements IJwtService {\r\n    public static final String SECRET = \"357638792F423F4428472B4B6250655368566D597133743677397A2443264629\";\r\n\r\n    @Override\r\n    public String extractUsername(String token) {\r\n        return extractClaim(token, Claims::getSubject);\r\n    }\r\n\r\n    @Override\r\n    public Date extractExpiration(String token) {\r\n        return extractClaim(token, Claims::getExpiration);\r\n    }\r\n\r\n    @Override\r\n    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {\r\n        final Claims claims = extractAllClaims(token);\r\n        return claimsResolver.apply(claims);\r\n    }\r\n\r\n    private Claims extractAllClaims(String token) {\r\n        return Jwts\r\n                .parserBuilder()\r\n                .setSigningKey(getSignKey())\r\n                .build()\r\n                .parseClaimsJws(token)\r\n                .getBody();\r\n    }\r\n\r\n    private Boolean isTokenExpired(String token) {\r\n        return extractExpiration(token).before(new Date());\r\n    }\r\n\r\n    @Override\r\n    public Boolean validateToken(String token, UserDetails userDetails) {\r\n        final String username = extractUsername(token);\r\n        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));\r\n    }\r\n\r\n    public String generateToken(UserDetails userDetails){\r\n        return generateToken(new HashMap<>(), userDetails);\r\n    }\r\n\r\n    private String generateToken(Map<String, Object> extraClaims, UserDetails userDetails) {\r\n\r\n        return Jwts.builder()\r\n                .setClaims(extraClaims)\r\n                .setSubject(userDetails.getUsername())\r\n                .setIssuedAt(new Date(System.currentTimeMillis()))\r\n                .setExpiration(new Date(System.currentTimeMillis()+ 1000 * 60 * 10)) //Token de 10 min de vida util\r\n                .signWith(getSignKey(), SignatureAlgorithm.HS256)\r\n                .compact();\r\n    }\r\n\r\n    private Key getSignKey() {\r\n        byte[] keyBytes = Decoders.BASE64.decode(SECRET);\r\n        return Keys.hmacShaKeyFor(keyBytes);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/service/JwtService.java b/../estaciones/src/main/java/com/arso/estaciones/service/JwtService.java
--- a/../estaciones/src/main/java/com/arso/estaciones/service/JwtService.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/service/JwtService.java	(date 1715152905753)
@@ -19,7 +19,7 @@
 public class JwtService implements IJwtService {
     public static final String SECRET = "357638792F423F4428472B4B6250655368566D597133743677397A2443264629";
 
-    @Override
+/*    @Override
     public String extractUsername(String token) {
         return extractClaim(token, Claims::getSubject);
     }
@@ -33,9 +33,10 @@
     public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
         final Claims claims = extractAllClaims(token);
         return claimsResolver.apply(claims);
-    }
+    }*/
 
-    private Claims extractAllClaims(String token) {
+    @Override
+    public Claims extractAllClaims(String token) {
         return Jwts
                 .parserBuilder()
                 .setSigningKey(getSignKey())
@@ -44,7 +45,7 @@
                 .getBody();
     }
 
-    private Boolean isTokenExpired(String token) {
+   /* private Boolean isTokenExpired(String token) {
         return extractExpiration(token).before(new Date());
     }
 
@@ -68,7 +69,7 @@
                 .signWith(getSignKey(), SignatureAlgorithm.HS256)
                 .compact();
     }
-
+*/
     private Key getSignKey() {
         byte[] keyBytes = Decoders.BASE64.decode(SECRET);
         return Keys.hmacShaKeyFor(keyBytes);
Index: ../pasarela/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=pasarela\r\n\r\nzuul.sensitiveHeaders=\r\n\r\nzuul.routes.users.path=/users/**\r\nzuul.routes.users.url=https://localhost:7073/Users
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../pasarela/src/main/resources/application.properties b/../pasarela/src/main/resources/application.properties
--- a/../pasarela/src/main/resources/application.properties	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../pasarela/src/main/resources/application.properties	(date 1715101538836)
@@ -1,6 +1,7 @@
 spring.application.name=pasarela
+server.port=8082
 
 zuul.sensitiveHeaders=
 
 zuul.routes.users.path=/users/**
-zuul.routes.users.url=https://localhost:7073/Users
\ No newline at end of file
+zuul.routes.users.url=http://usuarios:5259/Users
\ No newline at end of file
Index: src/main/resources/META-INF/persistence.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<persistence version=\"2.2\" xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd\">\r\n    <persistence-unit name=\"alquileres\">\r\n        <class>org.arso.persistence.jpa.UsuarioEntidad</class>\r\n        <class>org.arso.persistence.jpa.AlquilerEntidad</class>\r\n        <class>org.arso.persistence.jpa.ReservaEntidad</class>\r\n\r\n        \r\n        <properties>\r\n            <property name=\"javax.persistence.jdbc.driver\"\r\n                value=\"com.mysql.cj.jdbc.Driver\" />\r\n            <property name=\"javax.persistence.jdbc.user\"\r\n                value=\"root\" />\r\n<!--            <property name=\"javax.persistence.jdbc.password\"-->\r\n<!--                value=\"root\" />-->\r\n            <property name=\"javax.persistence.jdbc.url\"\r\n                value=\"jdbc:mysql://localhost:3306/alquileres?serverTimezone=CET\" />\r\n            <property name=\"eclipselink.ddl-generation\"\r\n                value=\"create-or-extend-tables\" />\r\n            <property name=\"eclipselink.query-results-cache\"\r\n                value=\"false\" />\r\n            <property name=\"eclipselink.cache.shared.default\"\r\n                value=\"false\" />\r\n            <property name=\"eclipselink.cache.size.default\"\r\n                value=\"0\" />\r\n            <property name=\"eclipselink.refresh\"\r\n                value=\"true\" />\r\n        </properties>   \r\n\r\n    </persistence-unit>\r\n\r\n</persistence>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/META-INF/persistence.xml b/src/main/resources/META-INF/persistence.xml
--- a/src/main/resources/META-INF/persistence.xml	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/resources/META-INF/persistence.xml	(date 1715104211285)
@@ -12,10 +12,10 @@
                 value="com.mysql.cj.jdbc.Driver" />
             <property name="javax.persistence.jdbc.user"
                 value="root" />
-<!--            <property name="javax.persistence.jdbc.password"-->
-<!--                value="root" />-->
+            <property name="javax.persistence.jdbc.password"
+                value="mysql123" />
             <property name="javax.persistence.jdbc.url"
-                value="jdbc:mysql://localhost:3306/alquileres?serverTimezone=CET" />
+                value="jdbc:mysql://localhost:3306/alquileres?useSSL=false&amp;serverTimezone=CET" />
             <property name="eclipselink.ddl-generation"
                 value="create-or-extend-tables" />
             <property name="eclipselink.query-results-cache"
Index: ../pasarela/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../pasarela/Dockerfile b/../pasarela/Dockerfile
new file mode 100644
--- /dev/null	(date 1715101054877)
+++ b/../pasarela/Dockerfile	(date 1715101054877)
@@ -0,0 +1,13 @@
+FROM maven:3.8.5-jdk-8 AS builder
+
+WORKDIR /app/
+COPY pom.xml .
+RUN mvn -e -B dependency:resolve
+COPY src ./src
+RUN mvn package
+
+FROM openjdk:8
+COPY --from=builder /app/target/pasarela-0.0.1-SNAPSHOT.jar /root.jar
+CMD ["java", "-jar", "/root.jar"]
+
+EXPOSE 8082
\ No newline at end of file
Index: ../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioEstaciones.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.interfaces;\r\n\r\nimport com.arso.estaciones.model.DTO.*;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\n\r\npublic interface IServicioEstaciones {\r\n    //Servicios a gestor\r\n    String altaEstacion(AltaEstacionDTO dto);\r\n\r\n    String altaBicicleta(AltaBicicletaDTO dto);\r\n\r\n    void bajaBicicleta(String idBicicleta, String motivo);\r\n\r\n    Page<BicicletaDTO> getAllBiciletas(String idEstacion, Pageable pageable);\r\n\r\n\r\n    //Servicios a todos los usuarios\r\n    Page<EstacionDTO> getAllEstaciones(Pageable pageable);\r\n\r\n    EstacionDTO getEstacion(String idEstacion);\r\n\r\n    Page<BicicletaDTO> getBicicletasDisponibles(String idEstacion, Pageable pageable);\r\n\r\n    void estacionarBicicleta(EstacionarBicicletaDTO dto);\r\n\r\n    void retirarBicicleta(String idBicicleta);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioEstaciones.java b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioEstaciones.java
--- a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioEstaciones.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IServicioEstaciones.java	(date 1715164912884)
@@ -1,6 +1,9 @@
 package com.arso.estaciones.interfaces;
 
+import com.arso.estaciones.model.Bicicleta;
 import com.arso.estaciones.model.DTO.*;
+import com.arso.estaciones.model.Estacion;
+import com.arso.estaciones.repository.EntidadNoEncontrada;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
@@ -8,21 +11,21 @@
     //Servicios a gestor
     String altaEstacion(AltaEstacionDTO dto);
 
-    String altaBicicleta(AltaBicicletaDTO dto);
+    String altaBicicleta(AltaBicicletaDTO dto) throws EntidadNoEncontrada;
 
-    void bajaBicicleta(String idBicicleta, String motivo);
+    void bajaBicicleta(String idBicicleta, String motivo) throws EntidadNoEncontrada;
 
-    Page<BicicletaDTO> getAllBiciletas(String idEstacion, Pageable pageable);
+    Page<Bicicleta> getAllBiciletas(String idEstacion, Pageable pageable);
 
 
     //Servicios a todos los usuarios
-    Page<EstacionDTO> getAllEstaciones(Pageable pageable);
+    Page<Estacion> getAllEstaciones(Pageable pageable);
 
-    EstacionDTO getEstacion(String idEstacion);
+    Estacion getEstacion(String idEstacion) throws EntidadNoEncontrada;
 
-    Page<BicicletaDTO> getBicicletasDisponibles(String idEstacion, Pageable pageable);
+    Page<Bicicleta> getBicicletasDisponibles(String idEstacion, Pageable pageable);
 
-    void estacionarBicicleta(EstacionarBicicletaDTO dto);
+    void estacionarBicicleta(EstacionarBicicletaDTO dto) throws EntidadNoEncontrada;
 
-    void retirarBicicleta(String idBicicleta);
+    void retirarBicicleta(String idBicicleta) throws EntidadNoEncontrada;
 }
Index: ../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioUsuarios.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.interfaces;\r\n\r\nimport com.arso.estaciones.model.Usuario;\r\nimport org.springframework.data.repository.NoRepositoryBean;\r\nimport org.springframework.data.repository.PagingAndSortingRepository;\r\n\r\n@NoRepositoryBean\r\npublic interface IRepositorioUsuarios extends PagingAndSortingRepository<Usuario, String> {\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioUsuarios.java b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioUsuarios.java
--- a/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioUsuarios.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/interfaces/IRepositorioUsuarios.java	(date 1715163368613)
@@ -4,7 +4,9 @@
 import org.springframework.data.repository.NoRepositoryBean;
 import org.springframework.data.repository.PagingAndSortingRepository;
 
+import java.util.Optional;
+
 @NoRepositoryBean
 public interface IRepositorioUsuarios extends PagingAndSortingRepository<Usuario, String> {
-
+    Optional<Usuario> findByNombre(String nombre);
 }
Index: ../estaciones/src/main/java/com/arso/estaciones/config/SecurityConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.config;\r\n\r\nimport com.arso.estaciones.auth.JWTTokenFilter;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationProvider;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableMethodSecurity\r\n@RequiredArgsConstructor\r\npublic class SecurityConfiguration {\r\n\r\n    private final JWTTokenFilter jwtAuthFilter;\r\n\r\n    private final AuthenticationProvider authenticationProvider;\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .csrf()\r\n            .disable()\r\n            .authorizeHttpRequests()\r\n            .antMatchers(\"/auth/**\")\r\n            .permitAll()\r\n            .antMatchers(\"/estaciones/estacionar\")\r\n            .permitAll()\r\n            .antMatchers(\"/estaciones/bicicletas/retirar/{idBicicleta}\")\r\n            .permitAll()\r\n            .antMatchers(\"/swagger-ui.html\", \"/swagger-ui/**\", \"/v3/api-docs/**\")\r\n            .permitAll()\r\n            .anyRequest()\r\n            .authenticated()\r\n            .and()\r\n            .sessionManagement()\r\n            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n            .and()\r\n            .authenticationProvider(authenticationProvider)\r\n            .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);\r\n\r\n\r\n        return http.build();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/config/SecurityConfiguration.java b/../estaciones/src/main/java/com/arso/estaciones/config/SecurityConfiguration.java
--- a/../estaciones/src/main/java/com/arso/estaciones/config/SecurityConfiguration.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/config/SecurityConfiguration.java	(date 1715153075307)
@@ -20,7 +20,7 @@
 
     private final JWTTokenFilter jwtAuthFilter;
 
-    private final AuthenticationProvider authenticationProvider;
+    //private final AuthenticationProvider authenticationProvider;
 
     @Bean
     public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
@@ -28,8 +28,6 @@
             .csrf()
             .disable()
             .authorizeHttpRequests()
-            .antMatchers("/auth/**")
-            .permitAll()
             .antMatchers("/estaciones/estacionar")
             .permitAll()
             .antMatchers("/estaciones/bicicletas/retirar/{idBicicleta}")
@@ -42,7 +40,7 @@
             .sessionManagement()
             .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
             .and()
-            .authenticationProvider(authenticationProvider)
+            //.authenticationProvider(authenticationProvider)
             .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);
 
 
Index: ../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.pasarela.config;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.apache.http.conn.ssl.NoopHostnameVerifier;\r\nimport org.apache.http.conn.ssl.TrustSelfSignedStrategy;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.ssl.SSLContextBuilder;\r\nimport org.springframework.cloud.netflix.zuul.filters.ProxyRequestHelper;\r\nimport org.springframework.cloud.netflix.zuul.filters.ZuulProperties;\r\nimport org.springframework.cloud.netflix.zuul.filters.route.SimpleHostRoutingFilter;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\n\r\n@Configuration\r\n@RequiredArgsConstructor\r\n\r\npublic class AppConfig {\r\n\r\n    //Como la API de .NET es https pues esto sirve para que un cliente HTTP ignore las verificaciones SSL\r\n    @Bean\r\n    public CloseableHttpClient httpClient() throws Exception {\r\n        return HttpClients.custom()\r\n                .setSSLContext(SSLContextBuilder.create()\r\n                        .loadTrustMaterial(null, (certificate, authType) -> true)\r\n                        .build())\r\n                .build();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java b/../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java
--- a/../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../pasarela/src/main/java/com/arso/pasarela/config/AppConfig.java	(date 1715100040572)
@@ -18,7 +18,7 @@
 
 public class AppConfig {
 
-    //Como la API de .NET es https pues esto sirve para que un cliente HTTP ignore las verificaciones SSL
+    /*//Como la API de .NET es https pues esto sirve para que un cliente HTTP ignore las verificaciones SSL
     @Bean
     public CloseableHttpClient httpClient() throws Exception {
         return HttpClients.custom()
@@ -26,5 +26,5 @@
                         .loadTrustMaterial(null, (certificate, authType) -> true)
                         .build())
                 .build();
-    }
+    }*/
 }
Index: ../LoginApi/Models/MongoRepository.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using MongoDB.Driver;\r\nusing Repositorio;\r\nusing WebApi.Entities;\r\n\r\nnamespace WebApi.Mongo.Repositorio;\r\n\r\npublic abstract class MongoRepository<T> : Repositorio<T, string> where T : IIdentificable \r\n{\r\n    private string _connectionString { get; set; }\r\n    private IMongoCollection<T> _collection;\r\n    private MongoClient _client;\r\n\r\n    public MongoRepository(){\r\n        _connectionString = \"mongodb+srv://freddy:Abril1204@cluster.bfkjqaz.mongodb.net/dbUsersNET?retryWrites=true&w=majority\";\r\n        _client = new MongoClient(_connectionString);\r\n        _collection = GetCollection();\r\n\r\n    }\r\n\r\n    public abstract IMongoCollection<T> GetCollection();\r\n    public abstract string GetCollectionName();\r\n\r\n    protected IMongoDatabase GetDatabase(){\r\n        return _client.GetDatabase(GetCollectionName());\r\n    }\r\n    \r\n    public virtual string Add(T entity)\r\n    {\r\n        if(entity == null) {\r\n            throw new ArgumentNullException(\"User can not be null\");\r\n        }\r\n\r\n        _collection.InsertOne(entity);\r\n        return entity.Id;\r\n    }\r\n\r\n    public void Delete(T entity)\r\n    {\r\n        if(entity == null) {\r\n            throw new ArgumentNullException(\"User can not be null\");\r\n        }\r\n\r\n        _collection.DeleteOne(user => user.Id == entity.Id);\r\n    }\r\n\r\n    public List<T> GetAll()\r\n    {\r\n        return _collection.Find(_ => true).ToList();\r\n    }\r\n\r\n    public T GetById(string id)\r\n    {\r\n        if(id == null) {\r\n            throw new ArgumentNullException(\"Id can not be null\");\r\n        }\r\n        return _collection.Find(user => user.Id == id)\r\n        .FirstOrDefault();\r\n    }\r\n\r\n    public List<string> GetIds()\r\n    {\r\n        var all = _collection.Find(_ => true).ToList();\r\n        return all.Select(p => p.Id).ToList();\r\n    }\r\n\r\n    public void Update(T entity)\r\n    {\r\n        if(entity == null) {\r\n            throw new ArgumentNullException(\"User can not be null\");\r\n        }\r\n        _collection.ReplaceOne(user => user.Id == entity.Id, entity);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/Models/MongoRepository.cs b/../LoginApi/Models/MongoRepository.cs
--- a/../LoginApi/Models/MongoRepository.cs	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/Models/MongoRepository.cs	(date 1715106018551)
@@ -10,8 +10,8 @@
     private IMongoCollection<T> _collection;
     private MongoClient _client;
 
-    public MongoRepository(){
-        _connectionString = "mongodb+srv://freddy:Abril1204@cluster.bfkjqaz.mongodb.net/dbUsersNET?retryWrites=true&w=majority";
+    public MongoRepository(IConfiguration configuration){
+        _connectionString = configuration["ASPNETCORE_MONGODB_CONNECTION_STRING"] ?? "mongodb://root:1234@localhost:27017/dbUsuarios?retryWrites=true&w=majority";
         _client = new MongoClient(_connectionString);
         _collection = GetCollection();
 
Index: ../LoginApi/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Repositorio;\r\nusing SignUpCodes.Repositorio;\r\nusing Users.Repositorio;\r\nusing WebApi.Authorization;\r\nusing WebApi.Entities;\r\nusing WebApi.Helpers;\r\nusing WebApi.Services;\r\n\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\n// Add services to the container.\r\n\r\nbuilder.Services.AddControllers();\r\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\r\nbuilder.Services.AddEndpointsApiExplorer();\r\nbuilder.Services.AddSwaggerGen();\r\n\r\nbuilder.Services.Configure<AppSettings>(builder.Configuration.GetSection(\"AppSettings\"));\r\n\r\nbuilder.Services.AddScoped<IJwtUtils, JwtUtils>();\r\nbuilder.Services.AddScoped<IUserService, UserService>();\r\nbuilder.Services.AddScoped<ISignUpCodeService, SignUpCodeService>();\r\nbuilder.Services.AddSingleton<Repositorio<User, string>, RepositorioUsersMongoDB>(); \r\nbuilder.Services.AddSingleton<Repositorio<SignUpCode, string>, SignUpCodesRepository>(); \r\n\r\nvar app = builder.Build();\r\n\r\n// Configure the HTTP request pipeline.\r\nif (app.Environment.IsDevelopment())\r\n{\r\n    app.UseSwagger();\r\n    app.UseSwaggerUI();\r\n}\r\n\r\n{\r\n    // global cors policy\r\n    app.UseCors(x => x\r\n        .AllowAnyOrigin()\r\n        .AllowAnyMethod()\r\n        .AllowAnyHeader());\r\n\r\n    // global error handler\r\n    app.UseMiddleware<ErrorHandlerMiddleware>();\r\n\r\n    app.UseHttpsRedirection();\r\n\r\n    app.UseAuthorization();\r\n\r\n    app.MapControllers();\r\n\r\n}\r\n\r\n\r\n\r\napp.Run();\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../LoginApi/Program.cs b/../LoginApi/Program.cs
--- a/../LoginApi/Program.cs	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../LoginApi/Program.cs	(date 1715105246879)
@@ -21,8 +21,18 @@
 builder.Services.AddScoped<IJwtUtils, JwtUtils>();
 builder.Services.AddScoped<IUserService, UserService>();
 builder.Services.AddScoped<ISignUpCodeService, SignUpCodeService>();
-builder.Services.AddSingleton<Repositorio<User, string>, RepositorioUsersMongoDB>(); 
-builder.Services.AddSingleton<Repositorio<SignUpCode, string>, SignUpCodesRepository>(); 
+
+builder.Services.AddSingleton<Repositorio<User, string>>(serviceProvider => 
+{
+    var configuration = serviceProvider.GetRequiredService<IConfiguration>();
+    return new RepositorioUsersMongoDB(configuration);
+});
+
+builder.Services.AddSingleton<Repositorio<SignUpCode, string>>(serviceProvider =>
+{
+    var configuration = serviceProvider.GetRequiredService<IConfiguration>();
+    return new SignUpCodesRepository(configuration);
+});
 
 var app = builder.Build();
 
Index: ../estaciones/src/main/java/com/arso/estaciones/service/ServicioEstaciones.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.service;\r\n\r\nimport com.arso.estaciones.EstacionesApplication;\r\nimport com.arso.estaciones.communication.Evento;\r\nimport com.arso.estaciones.communication.PublicadorEventos;\r\nimport com.arso.estaciones.interfaces.IServicioEstaciones;\r\nimport com.arso.estaciones.model.Bicicleta;\r\nimport com.arso.estaciones.model.Coordenada;\r\nimport com.arso.estaciones.model.DTO.*;\r\nimport com.arso.estaciones.model.Estacion;\r\nimport com.arso.estaciones.repository.RepositorioBicicletas;\r\nimport com.arso.estaciones.repository.RepositorioEstaciones;\r\n\r\nimport org.apache.catalina.core.ApplicationContext;\r\nimport org.springframework.beans.factory.BeanFactory;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.context.ConfigurableApplicationContext;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageImpl;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.stream.Collectors;\r\n\r\n@Service\r\n@Transactional\r\npublic class ServicioEstaciones implements IServicioEstaciones {\r\n    private RepositorioEstaciones repositorioEstaciones;\r\n    private RepositorioBicicletas repositorioBicicletas;\r\n    @Autowired\r\n    private ApplicationContext context;\r\n\r\n    @Autowired\r\n    public ServicioEstaciones(RepositorioEstaciones repositorioEstaciones, RepositorioBicicletas repositorioBicicletas){\r\n        this.repositorioEstaciones = repositorioEstaciones;\r\n        this.repositorioBicicletas = repositorioBicicletas;\r\n    }\r\n\r\n    @Override\r\n    public String altaEstacion(AltaEstacionDTO dto) {\r\n        Coordenada coordenada = new Coordenada(dto.getLat(), dto.getLng());\r\n        Estacion estacion = new Estacion(dto.getNombre(), dto.getPuestos(), dto.getDireccion(),coordenada);\r\n        repositorioEstaciones.save(estacion);\r\n        return estacion.getId();\r\n    }\r\n\r\n    @Override\r\n    public String altaBicicleta(AltaBicicletaDTO dto) {\r\n        Optional<Estacion> estacionOptional = repositorioEstaciones.findById(dto.getIdEstacion());\r\n        if(estacionOptional.isPresent()){\r\n            Estacion estacion = estacionOptional.get();\r\n            if(estacion.hayHueco()){\r\n                Bicicleta bicicleta = new Bicicleta(dto.getModelo(), estacion);\r\n                repositorioBicicletas.save(bicicleta);\r\n\r\n                estacion.addBicicleta(bicicleta);\r\n                repositorioEstaciones.save(estacion);\r\n                return bicicleta.getId();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void bajaBicicleta(String idBicicleta, String motivo) {\r\n\r\n        if(idBicicleta == null || idBicicleta.isEmpty()){\r\n            throw new IllegalArgumentException(\"id: no debe ser nulo ni vacio\");\r\n        }\r\n\r\n        Optional<Bicicleta> bicicletaOptional = repositorioBicicletas.findById(idBicicleta);\r\n\r\n        if(bicicletaOptional.isPresent()){\r\n            Bicicleta bicicleta = bicicletaOptional.get();\r\n            bicicleta.darDeBaja(motivo);\r\n            repositorioBicicletas.save(bicicleta);\r\n        }\r\n        \r\n        //Creamos el evento\r\n        Evento evento = new Evento(\"bicicleta-desactivada\", LocalDateTime.now(), idBicicleta);\r\n        PublicadorEventos publicador = ((BeanFactory) context).getBean(PublicadorEventos.class);\r\n        publicador.sendMessage(evento);\r\n    }\r\n\r\n    @Override\r\n    public Page<BicicletaDTO> getAllBiciletas(String idEstacion, Pageable pageable) {\r\n\r\n        if(idEstacion == null || idEstacion.isEmpty()){\r\n            throw new IllegalArgumentException(\"id: no debe ser nulo ni vacio\");\r\n        }\r\n\r\n        return repositorioBicicletas.findByEstacionActualId(idEstacion, pageable).map(bicicleta -> {\r\n            BicicletaDTO dto =DTOHelper.fromEntity(bicicleta);\r\n            return dto;\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public Page<EstacionDTO> getAllEstaciones(Pageable pageable) {\r\n        return repositorioEstaciones.findAll(pageable).map(estacion -> {\r\n            EstacionDTO dto =DTOHelper.fromEntity(estacion);\r\n            return dto;\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public EstacionDTO getEstacion(String idEstacion) {\r\n\r\n        if(idEstacion == null || idEstacion.isEmpty()){\r\n            throw new IllegalArgumentException(\"id: no debe ser nulo ni vacio\");\r\n        }\r\n\r\n        Optional<Estacion> estacionOptional = repositorioEstaciones.findById(idEstacion);\r\n        if(estacionOptional.isPresent()){\r\n            Estacion estacion = estacionOptional.get();\r\n            return DTOHelper.fromEntity(estacion);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Page<BicicletaDTO> getBicicletasDisponibles(String idEstacion, Pageable pageable) {\r\n\r\n        if(idEstacion == null || idEstacion.isEmpty()){\r\n            throw new IllegalArgumentException(\"id: no debe ser nulo ni vacio\");\r\n        }\r\n\r\n        return repositorioBicicletas.findByDisponibleAndEstacionActualId(idEstacion, pageable).map(bicicleta -> {\r\n            BicicletaDTO dto =DTOHelper.fromEntity(bicicleta);\r\n            return dto;\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void estacionarBicicleta(EstacionarBicicletaDTO dto) {\r\n        Optional<Estacion> estacionOptional = repositorioEstaciones.findById(dto.getIdEstacion());\r\n        if(estacionOptional.isPresent()){\r\n            Estacion estacion = estacionOptional.get();\r\n            if(estacion.hayHueco()){\r\n                Optional<Bicicleta> bicicletaOptional = repositorioBicicletas.findById(dto.getIdBicicleta());\r\n                if(bicicletaOptional.isPresent()){\r\n                    Bicicleta bicicleta = bicicletaOptional.get();\r\n                    estacion.addBicicleta(bicicleta);\r\n                    bicicleta.setEstacionActual(estacion);\r\n                    bicicleta.setDisponible(true);\r\n                    repositorioBicicletas.save(bicicleta);\r\n                    repositorioEstaciones.save(estacion);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void retirarBicicleta(String idBicicleta) {\r\n        Optional<Bicicleta> bicicletaOptional = repositorioBicicletas.findById(idBicicleta);\r\n        if(bicicletaOptional.isPresent()){\r\n            Bicicleta bicicleta = bicicletaOptional.get();\r\n            Estacion estacion = bicicleta.getEstacionActual();\r\n\r\n            estacion.removeBicicleta(bicicleta);\r\n            bicicleta.setEstacionActual(null);\r\n            bicicleta.setDisponible(false);\r\n            repositorioBicicletas.save(bicicleta);\r\n            repositorioEstaciones.save(estacion);\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/service/ServicioEstaciones.java b/../estaciones/src/main/java/com/arso/estaciones/service/ServicioEstaciones.java
--- a/../estaciones/src/main/java/com/arso/estaciones/service/ServicioEstaciones.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/service/ServicioEstaciones.java	(date 1715165172714)
@@ -3,14 +3,15 @@
 import com.arso.estaciones.EstacionesApplication;
 import com.arso.estaciones.communication.Evento;
 import com.arso.estaciones.communication.PublicadorEventos;
+import com.arso.estaciones.interfaces.IRepositorioBicicletas;
+import com.arso.estaciones.interfaces.IRepositorioEstaciones;
 import com.arso.estaciones.interfaces.IServicioEstaciones;
 import com.arso.estaciones.model.Bicicleta;
 import com.arso.estaciones.model.Coordenada;
 import com.arso.estaciones.model.DTO.*;
 import com.arso.estaciones.model.Estacion;
-import com.arso.estaciones.repository.RepositorioBicicletas;
-import com.arso.estaciones.repository.RepositorioEstaciones;
 
+import com.arso.estaciones.repository.EntidadNoEncontrada;
 import org.apache.catalina.core.ApplicationContext;
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -30,13 +31,11 @@
 @Service
 @Transactional
 public class ServicioEstaciones implements IServicioEstaciones {
-    private RepositorioEstaciones repositorioEstaciones;
-    private RepositorioBicicletas repositorioBicicletas;
-    @Autowired
-    private ApplicationContext context;
+    private IRepositorioEstaciones repositorioEstaciones;
+    private IRepositorioBicicletas repositorioBicicletas;
 
     @Autowired
-    public ServicioEstaciones(RepositorioEstaciones repositorioEstaciones, RepositorioBicicletas repositorioBicicletas){
+    public ServicioEstaciones(IRepositorioEstaciones repositorioEstaciones, IRepositorioBicicletas repositorioBicicletas){
         this.repositorioEstaciones = repositorioEstaciones;
         this.repositorioBicicletas = repositorioBicicletas;
     }
@@ -50,7 +49,7 @@
     }
 
     @Override
-    public String altaBicicleta(AltaBicicletaDTO dto) {
+    public String altaBicicleta(AltaBicicletaDTO dto) throws EntidadNoEncontrada {
         Optional<Estacion> estacionOptional = repositorioEstaciones.findById(dto.getIdEstacion());
         if(estacionOptional.isPresent()){
             Estacion estacion = estacionOptional.get();
@@ -62,12 +61,14 @@
                 repositorioEstaciones.save(estacion);
                 return bicicleta.getId();
             }
+        }else{
+            throw new EntidadNoEncontrada("La bicicleta: " + dto.getIdEstacion() + " no se encuentra en la BBDD");
         }
         return null;
     }
 
     @Override
-    public void bajaBicicleta(String idBicicleta, String motivo) {
+    public void bajaBicicleta(String idBicicleta, String motivo) throws EntidadNoEncontrada {
 
         if(idBicicleta == null || idBicicleta.isEmpty()){
             throw new IllegalArgumentException("id: no debe ser nulo ni vacio");
@@ -79,37 +80,33 @@
             Bicicleta bicicleta = bicicletaOptional.get();
             bicicleta.darDeBaja(motivo);
             repositorioBicicletas.save(bicicleta);
+        }else{
+            throw new EntidadNoEncontrada("La bicicleta: " + idBicicleta + " no se encuentra en la BBDD");
         }
         
         //Creamos el evento
-        Evento evento = new Evento("bicicleta-desactivada", LocalDateTime.now(), idBicicleta);
+       /* Evento evento = new Evento("bicicleta-desactivada", LocalDateTime.now(), idBicicleta);
         PublicadorEventos publicador = ((BeanFactory) context).getBean(PublicadorEventos.class);
-        publicador.sendMessage(evento);
+        publicador.sendMessage(evento);*/
     }
 
     @Override
-    public Page<BicicletaDTO> getAllBiciletas(String idEstacion, Pageable pageable) {
+    public Page<Bicicleta> getAllBiciletas(String idEstacion, Pageable pageable) {
 
         if(idEstacion == null || idEstacion.isEmpty()){
             throw new IllegalArgumentException("id: no debe ser nulo ni vacio");
         }
 
-        return repositorioBicicletas.findByEstacionActualId(idEstacion, pageable).map(bicicleta -> {
-            BicicletaDTO dto =DTOHelper.fromEntity(bicicleta);
-            return dto;
-        });
+        return repositorioBicicletas.findByEstacionActualId(idEstacion, pageable);
     }
 
     @Override
-    public Page<EstacionDTO> getAllEstaciones(Pageable pageable) {
-        return repositorioEstaciones.findAll(pageable).map(estacion -> {
-            EstacionDTO dto =DTOHelper.fromEntity(estacion);
-            return dto;
-        });
+    public Page<Estacion> getAllEstaciones(Pageable pageable) {
+        return repositorioEstaciones.findAll(pageable);
     }
 
     @Override
-    public EstacionDTO getEstacion(String idEstacion) {
+    public Estacion getEstacion(String idEstacion) throws EntidadNoEncontrada {
 
         if(idEstacion == null || idEstacion.isEmpty()){
             throw new IllegalArgumentException("id: no debe ser nulo ni vacio");
@@ -117,27 +114,24 @@
 
         Optional<Estacion> estacionOptional = repositorioEstaciones.findById(idEstacion);
         if(estacionOptional.isPresent()){
-            Estacion estacion = estacionOptional.get();
-            return DTOHelper.fromEntity(estacion);
+            return estacionOptional.get();
+        }else{
+            throw new EntidadNoEncontrada("La estacion: " + idEstacion + " no se encuentra en la BBDD");
         }
-        return null;
     }
 
     @Override
-    public Page<BicicletaDTO> getBicicletasDisponibles(String idEstacion, Pageable pageable) {
+    public Page<Bicicleta> getBicicletasDisponibles(String idEstacion, Pageable pageable) {
 
         if(idEstacion == null || idEstacion.isEmpty()){
             throw new IllegalArgumentException("id: no debe ser nulo ni vacio");
         }
 
-        return repositorioBicicletas.findByDisponibleAndEstacionActualId(idEstacion, pageable).map(bicicleta -> {
-            BicicletaDTO dto =DTOHelper.fromEntity(bicicleta);
-            return dto;
-        });
+        return repositorioBicicletas.findByDisponibleAndEstacionActualId(idEstacion, pageable);
     }
 
     @Override
-    public void estacionarBicicleta(EstacionarBicicletaDTO dto) {
+    public void estacionarBicicleta(EstacionarBicicletaDTO dto) throws EntidadNoEncontrada {
         Optional<Estacion> estacionOptional = repositorioEstaciones.findById(dto.getIdEstacion());
         if(estacionOptional.isPresent()){
             Estacion estacion = estacionOptional.get();
@@ -151,12 +145,20 @@
                     repositorioBicicletas.save(bicicleta);
                     repositorioEstaciones.save(estacion);
                 }
+            }else{
+                throw new EntidadNoEncontrada("La bicicleta: " + dto.getIdBicicleta() + " no se encuentra en la BBDD");
             }
+        }else{
+            throw new EntidadNoEncontrada("La estacion: " + dto.getIdEstacion() + " no se encuentra en la BBDD");
         }
     }
 
     @Override
-    public void retirarBicicleta(String idBicicleta) {
+    public void retirarBicicleta(String idBicicleta) throws EntidadNoEncontrada {
+        if(idBicicleta == null || idBicicleta.isEmpty()){
+            throw new IllegalArgumentException("id: no debe ser nulo ni vacio");
+        }
+
         Optional<Bicicleta> bicicletaOptional = repositorioBicicletas.findById(idBicicleta);
         if(bicicletaOptional.isPresent()){
             Bicicleta bicicleta = bicicletaOptional.get();
@@ -167,6 +169,8 @@
             bicicleta.setDisponible(false);
             repositorioBicicletas.save(bicicleta);
             repositorioEstaciones.save(estacion);
+        }else{
+            throw new EntidadNoEncontrada("La bicicleta: " + idBicicleta + " no se encuentra en la BBDD");
         }
 
     }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\r\n\t<groupId>org.arso</groupId>\r\n\t<artifactId>alquileres</artifactId>\r\n\t<version>1.0-SNAPSHOT</version>\r\n\t<packaging>war</packaging>\r\n\r\n\t<properties>\r\n\t\t<maven.compiler.target>1.8</maven.compiler.target>\r\n\t\t<maven.compiler.source>1.8</maven.compiler.source>\r\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n\t</properties>\r\n\r\n\t<dependencies>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>8.0.19</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.eclipse.persistence</groupId>\r\n            <artifactId>eclipselink</artifactId>\r\n            <version>2.7.6</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.persistence</groupId>\r\n            <artifactId>javax.persistence-api</artifactId>\r\n            <version>2.2</version>\r\n        </dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.squareup.retrofit2</groupId>\r\n\t\t\t<artifactId>retrofit</artifactId>\r\n\t\t\t<version>2.9.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.squareup.retrofit2</groupId>\r\n\t\t\t<artifactId>converter-jackson</artifactId>\r\n\t\t\t<version>2.9.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.squareup.retrofit2</groupId>\r\n\t\t\t<artifactId>converter-jaxb</artifactId>\r\n\t\t\t<version>2.9.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.rabbitmq</groupId>\r\n\t\t\t<artifactId>amqp-client</artifactId>\r\n\t\t\t<version>5.8.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.squareup.retrofit2</groupId>\r\n\t\t\t<artifactId>retrofit</artifactId>\r\n\t\t\t<version>2.9.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.squareup.retrofit2</groupId>\r\n\t\t\t<artifactId>converter-jackson</artifactId>\r\n\t\t\t<version>2.9.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.squareup.retrofit2</groupId>\r\n\t\t\t<artifactId>converter-jaxb</artifactId>\r\n\t\t\t<version>2.9.0</version>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.glassfish.jersey.containers</groupId>\r\n\t\t\t<artifactId>jersey-container-servlet</artifactId>\r\n\t\t\t<version>2.41</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.glassfish.jersey.inject</groupId>\r\n\t\t\t<artifactId>jersey-hk2</artifactId>\r\n\t\t\t<version>2.41</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.glassfish.jersey.media</groupId>\r\n\t\t\t<artifactId>jersey-media-jaxb</artifactId>\r\n\t\t\t<version>2.41</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.glassfish.jersey.media</groupId>\r\n\t\t\t<artifactId>jersey-media-json-gson</artifactId>\r\n\t\t\t<version>2.41</version>\r\n\t\t</dependency>\r\n\r\n\t\t<!-- JAXB: solo es necesario si JDK > 8 -->\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>javax.xml.bind</groupId>\r\n\t\t\t<artifactId>jaxb-api</artifactId>\r\n\t\t\t<version>2.3.1</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.glassfish.jaxb</groupId>\r\n\t\t\t<artifactId>jaxb-runtime</artifactId>\r\n\t\t\t<version>2.3.1</version>\r\n\t\t</dependency>\r\n\r\n\r\n\t\t<!-- test lib -->\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.assertj</groupId>\r\n\t\t\t<artifactId>assertj-core</artifactId>\r\n\t\t\t<version>3.16.1</version>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.junit.jupiter</groupId>\r\n\t\t\t<artifactId>junit-jupiter-api</artifactId>\r\n\t\t\t<version>5.7.0-M1</version>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.junit.jupiter</groupId>\r\n\t\t\t<artifactId>junit-jupiter-engine</artifactId>\r\n\t\t\t<version>5.7.0-M1</version>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>io.jsonwebtoken</groupId>\r\n\t\t\t<artifactId>jjwt</artifactId>\r\n\t\t\t<version>0.9.1</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>javax.servlet</groupId>\r\n\t\t\t<artifactId>javax.servlet-api</artifactId>\r\n\t\t\t<version>3.1.0</version>\r\n\t\t\t<scope>provided</scope>\r\n\t\t</dependency>\r\n\r\n\t\t<!--<dependency>\r\n\t\t\t<groupId>org.eclipse.jetty</groupId>\r\n\t\t\t<artifactId>jetty-servlets</artifactId>\r\n\t\t\t<version>10.0.18</version>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.eclipse.jetty</groupId>\r\n\t\t\t<artifactId>jetty-server</artifactId>\r\n\t\t\t<version>10.0.18</version>\r\n\t\t</dependency>-->\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.arso</groupId>\r\n\t\t\t<artifactId>estaciones</artifactId>\r\n\t\t\t<version>0.0.1-SNAPSHOT</version>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.eclipse.jetty</groupId>\r\n\t\t\t\t<artifactId>jetty-maven-plugin</artifactId>\r\n\t\t\t\t<version>10.0.18</version>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/pom.xml	(date 1715096339825)
@@ -150,11 +150,6 @@
 			<artifactId>jetty-server</artifactId>
 			<version>10.0.18</version>
 		</dependency>-->
-		<dependency>
-			<groupId>com.arso</groupId>
-			<artifactId>estaciones</artifactId>
-			<version>0.0.1-SNAPSHOT</version>
-		</dependency>
 	</dependencies>
 
 	<build>
Index: ../estaciones/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring.application.name=estaciones\r\nspring.data.mongodb.uri=mongodb+srv://freddy:Abril1204@cluster.bfkjqaz.mongodb.net/dbEstaciones?retryWrites=true&w=majority\r\nspring.rabbitmq.addresses=amqps://hazguuiy:sxBSsDOJonJWPEdeSN5IlJ2Ck0cl_WUK@stingray.rmq.cloudamqp.com/hazguuiy
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/../estaciones/src/main/resources/application.properties b/../estaciones/src/main/resources/application.properties
--- a/../estaciones/src/main/resources/application.properties	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/resources/application.properties	(date 1715167139347)
@@ -1,3 +1,4 @@
 spring.application.name=estaciones
-spring.data.mongodb.uri=mongodb+srv://freddy:Abril1204@cluster.bfkjqaz.mongodb.net/dbEstaciones?retryWrites=true&w=majority
+server.port=8081
+#spring.data.mongodb.uri=mongodb+srv://freddy:Abril1204@cluster.bfkjqaz.mongodb.net/dbEstaciones?retryWrites=true&w=majority
 spring.rabbitmq.addresses=amqps://hazguuiy:sxBSsDOJonJWPEdeSN5IlJ2Ck0cl_WUK@stingray.rmq.cloudamqp.com/hazguuiy
\ No newline at end of file
Index: src/main/java/org/arso/services/JwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/services/JwtService.java b/src/main/java/org/arso/services/JwtService.java
new file mode 100644
--- /dev/null	(date 1715157505755)
+++ b/src/main/java/org/arso/services/JwtService.java	(date 1715157505755)
@@ -0,0 +1,17 @@
+package org.arso.services;
+
+import io.jsonwebtoken.Claims;
+import io.jsonwebtoken.Jwts;
+import org.arso.interfaces.IJwtService;
+
+public class JwtService implements IJwtService {
+    public static final String SECRET = "357638792F423F4428472B4B6250655368566D597133743677397A2443264629";
+
+    @Override
+    public Claims extractAllClaims(String token) {
+        return Jwts.parser()
+                .setSigningKey(SECRET)
+                .parseClaimsJws(token)
+                .getBody();
+    }
+}
Index: ../estaciones/src/main/java/com/arso/estaciones/communication/ConsumidorEventos.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.communication;\r\n\r\nimport java.io.IOException;\r\n\r\nimport org.springframework.amqp.core.Message;\r\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.context.ConfigurableApplicationContext;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport com.arso.estaciones.EstacionesApplication;\r\nimport com.arso.estaciones.interfaces.IServicioEstaciones;\r\nimport com.arso.estaciones.model.DTO.BicicletaDTO;\r\nimport com.arso.estaciones.model.DTO.EstacionarBicicletaDTO;\r\nimport com.arso.estaciones.rest.ControladorEstaciones;\r\nimport com.fasterxml.jackson.core.exc.StreamReadException;\r\nimport com.fasterxml.jackson.databind.DatabindException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\n@Component\r\npublic class ConsumidorEventos implements IConsumidorEventos{\r\n\t\r\n\tprivate final static String bici_Alquilada = \"bicicleta-alquilada\";\r\n\tprivate final static String bici_Alquiler_Concluido = \"bicicleta-alquiler-concluido\";\r\n\r\n\t\r\n\t@Autowired\r\n    private ObjectMapper objectMapper;\r\n\t\r\n\t@Override\r\n\t//@RabbitListener(queues = RabbitMQConfig.QUEUE_NAME)\r\n\tpublic void handleEvent(Message mensaje) throws StreamReadException, DatabindException, IOException {\r\n\t\tbyte[] cuerpo = mensaje.getBody();\r\n\r\n        // Deserializar el cuerpo del mensaje a un objeto de tipo Evento\r\n        Evento evento = objectMapper.readValue(cuerpo, Evento.class);\r\n        \r\n        ConfigurableApplicationContext context = SpringApplication.run(EstacionesApplication.class);\r\n        IServicioEstaciones servicio = context.getBean(IServicioEstaciones.class);\r\n        \r\n        System.out.println(\"Tipo del evento: \"+ evento.getTipo());\r\n        \r\n        if (evento.getTipo().equals(bici_Alquilada)) {\r\n\t\t\tservicio.retirarBicicleta(evento.getIdBicicleta());\r\n\t\t}\r\n        else if (evento.getTipo().equals(bici_Alquiler_Concluido)) { //Id hardcodeado por duda\r\n        \tEstacionarBicicletaDTO dto = new EstacionarBicicletaDTO(\"661980bb46b9b4732c1b2e47\", evento.getIdBicicleta());\r\n        \tservicio.estacionarBicicleta(dto);\r\n        }\r\n\t\t\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/communication/ConsumidorEventos.java b/../estaciones/src/main/java/com/arso/estaciones/communication/ConsumidorEventos.java
--- a/../estaciones/src/main/java/com/arso/estaciones/communication/ConsumidorEventos.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/communication/ConsumidorEventos.java	(date 1715164968485)
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 
+import com.arso.estaciones.repository.EntidadNoEncontrada;
 import org.springframework.amqp.core.Message;
 import org.springframework.amqp.rabbit.annotation.RabbitListener;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -30,7 +31,7 @@
 	
 	@Override
 	//@RabbitListener(queues = RabbitMQConfig.QUEUE_NAME)
-	public void handleEvent(Message mensaje) throws StreamReadException, DatabindException, IOException {
+	public void handleEvent(Message mensaje) throws StreamReadException, DatabindException, IOException, EntidadNoEncontrada {
 		byte[] cuerpo = mensaje.getBody();
 
         // Deserializar el cuerpo del mensaje a un objeto de tipo Evento
Index: src/main/java/org/arso/interfaces/IJwtService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/interfaces/IJwtService.java b/src/main/java/org/arso/interfaces/IJwtService.java
new file mode 100644
--- /dev/null	(date 1715157505688)
+++ b/src/main/java/org/arso/interfaces/IJwtService.java	(date 1715157505688)
@@ -0,0 +1,7 @@
+package org.arso.interfaces;
+
+import io.jsonwebtoken.Claims;
+
+public interface IJwtService {
+    Claims extractAllClaims(String token);
+}
Index: ../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioBicicletas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.repository;\r\n\r\nimport com.arso.estaciones.interfaces.IRepositorioBicicletas;\r\nimport com.arso.estaciones.model.Bicicleta;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.mongodb.repository.MongoRepository;\r\nimport org.springframework.data.mongodb.repository.Query;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface RepositorioBicicletas extends IRepositorioBicicletas, MongoRepository<Bicicleta, String> {\r\n    @Query(\"{'estacionActual.id': ?0}\")\r\n    Page<Bicicleta> findByEstacionActualId(String idEstacion, Pageable pageable);\r\n\r\n    @Query(\"{'estacionActual.id': ?0, 'disponible': true}\")\r\n    Page<Bicicleta> findByDisponibleAndEstacionActualId(String idEstacion, Pageable pageable);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioBicicletas.java b/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioBicicletas.java
--- a/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioBicicletas.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioBicicletas.java	(date 1715163368661)
@@ -10,9 +10,5 @@
 
 @Repository
 public interface RepositorioBicicletas extends IRepositorioBicicletas, MongoRepository<Bicicleta, String> {
-    @Query("{'estacionActual.id': ?0}")
-    Page<Bicicleta> findByEstacionActualId(String idEstacion, Pageable pageable);
 
-    @Query("{'estacionActual.id': ?0, 'disponible': true}")
-    Page<Bicicleta> findByDisponibleAndEstacionActualId(String idEstacion, Pageable pageable);
 }
Index: ../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioUsuarios.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.repository;\r\n\r\nimport com.arso.estaciones.interfaces.IRepositorioUsuarios;\r\nimport com.arso.estaciones.model.Usuario;\r\nimport org.springframework.data.mongodb.repository.MongoRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.Optional;\r\n\r\n@Repository\r\npublic interface RepositorioUsuarios extends IRepositorioUsuarios, MongoRepository<Usuario, String> {\r\n    Optional<Usuario> findByNombre(String nombre);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioUsuarios.java b/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioUsuarios.java
--- a/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioUsuarios.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/repository/RepositorioUsuarios.java	(date 1715163368690)
@@ -9,5 +9,5 @@
 
 @Repository
 public interface RepositorioUsuarios extends IRepositorioUsuarios, MongoRepository<Usuario, String> {
-    Optional<Usuario> findByNombre(String nombre);
+
 }
Index: ../estaciones/src/main/java/com/arso/estaciones/communication/IConsumidorEventos.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.arso.estaciones.communication;\r\n\r\nimport java.io.IOException;\r\n\r\nimport org.springframework.amqp.core.Message;\r\n\r\nimport com.fasterxml.jackson.core.exc.StreamReadException;\r\nimport com.fasterxml.jackson.databind.DatabindException;\r\n\r\npublic interface IConsumidorEventos {\r\n\t\r\n\tpublic void handleEvent(Message evento) throws StreamReadException, DatabindException, IOException;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/communication/IConsumidorEventos.java b/../estaciones/src/main/java/com/arso/estaciones/communication/IConsumidorEventos.java
--- a/../estaciones/src/main/java/com/arso/estaciones/communication/IConsumidorEventos.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/../estaciones/src/main/java/com/arso/estaciones/communication/IConsumidorEventos.java	(date 1715164968477)
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 
+import com.arso.estaciones.repository.EntidadNoEncontrada;
 import org.springframework.amqp.core.Message;
 
 import com.fasterxml.jackson.core.exc.StreamReadException;
@@ -9,6 +10,6 @@
 
 public interface IConsumidorEventos {
 	
-	public void handleEvent(Message evento) throws StreamReadException, DatabindException, IOException;
+	public void handleEvent(Message evento) throws StreamReadException, DatabindException, IOException, EntidadNoEncontrada;
 
 }
Index: src/main/java/org/arso/tests/ProgramEjercicio1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.tests;\r\n\r\nimport org.arso.factory.FactoriaRepositorios;\r\nimport org.arso.factory.FactoriaServicios;\r\nimport org.arso.interfaces.services.IServicioAlquileres;\r\nimport org.arso.model.Reserva;\r\nimport org.arso.model.Usuario;\r\nimport org.arso.repository.EntidadNoEncontrada;\r\nimport org.arso.repository.NotAllowedException;\r\nimport org.arso.repository.RepositorioException;\r\nimport org.arso.repository.RepositorioUsuarioMemoria;\r\nimport org.arso.services.ServicioAlquileresException;\r\n\r\nimport java.io.IOException;\r\nimport java.time.LocalDateTime;\r\n\r\npublic class ProgramEjercicio1 {\r\n    public static void main(String[] args) throws NotAllowedException, EntidadNoEncontrada, RepositorioException {\r\n        RepositorioUsuarioMemoria repositorio = FactoriaRepositorios.getRepositorio(Usuario.class);\r\n        IServicioAlquileres servicio = FactoriaServicios.getServicio(IServicioAlquileres.class);\r\n\r\n        //Reservar bicicleta con repositorio en memoria\r\n        servicio.reservarBicicleta(\"1\", \"2\");\r\n\r\n        //Confirmar la reserva activa del usuario\r\n        servicio.confirmarReserva(\"1\");\r\n\r\n        //Alquilar bicicleta sin reserva previa\r\n        //Para que funcione se deben comentar los dos metodos anteriores del servicio\r\n        //ya que solo podemos alguilar directamente una bici si no tenemo ninguna reserva ni alquiler activo\r\n        //servicio.alquilarBicicleta(\"1\", \"3\");\r\n\r\n        //Obtener el historial del usuario\r\n        Usuario usuario = servicio.historialUsuario(\"1\");\r\n        System.out.println(usuario.toString());\r\n\r\n        //Dejar la bicicleta en una estación\r\n        //servicio.dejarBicicleta(\"1\", \"333\");\r\n\r\n        //Liberar al usuario del bloqueo.\r\n        //Para ello primero creamos una reserva que se vaya a bloquear.\r\n        Reserva r = new Reserva();\r\n        r.setIdBicicleta(\"2\");\r\n        r.setCreada(LocalDateTime.now().minusMinutes(35));\r\n        r.setCaducidad(LocalDateTime.now());\r\n\r\n        usuario.addReserva(r);\r\n\r\n        servicio.liberarBloqueo(\"1\");\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/tests/ProgramEjercicio1.java b/src/main/java/org/arso/tests/ProgramEjercicio1.java
--- a/src/main/java/org/arso/tests/ProgramEjercicio1.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/tests/ProgramEjercicio1.java	(date 1715157505830)
@@ -2,16 +2,14 @@
 
 import org.arso.factory.FactoriaRepositorios;
 import org.arso.factory.FactoriaServicios;
-import org.arso.interfaces.services.IServicioAlquileres;
+import org.arso.interfaces.IServicioAlquileres;
 import org.arso.model.Reserva;
 import org.arso.model.Usuario;
 import org.arso.repository.EntidadNoEncontrada;
 import org.arso.repository.NotAllowedException;
 import org.arso.repository.RepositorioException;
 import org.arso.repository.RepositorioUsuarioMemoria;
-import org.arso.services.ServicioAlquileresException;
 
-import java.io.IOException;
 import java.time.LocalDateTime;
 
 public class ProgramEjercicio1 {
Index: src/main/java/org/arso/repository/jpa/RepositorioJPA.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.arso.repository.jpa;\r\n\r\nimport org.arso.interfaces.IIdentificable;\r\nimport org.arso.interfaces.repository.IRepositorioString;\r\nimport org.arso.repository.EntidadNoEncontrada;\r\nimport org.arso.repository.RepositorioException;\r\nimport org.arso.utils.EntityManagerHelper;\r\n\r\nimport javax.persistence.EntityManager;\r\nimport javax.persistence.PersistenceContext;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic abstract class RepositorioJPA<T extends IIdentificable, K extends IIdentificable> implements IRepositorioString<T> {\r\n\r\n    @PersistenceContext\r\n    private EntityManager entityManager;\r\n\r\n    @Override\r\n    public String add(T entity) throws RepositorioException {\r\n        entityManager = EntityManagerHelper.getEntityManager();\r\n        K persistableEntity = convertToEntidad(entity);\r\n        try {\r\n            entityManager.getTransaction().begin();\r\n            entityManager.persist(persistableEntity);\r\n            entityManager.getTransaction().commit();\r\n            return persistableEntity.getId();\r\n        } catch (Exception e) {\r\n            if (entityManager.getTransaction().isActive()) {\r\n                entityManager.getTransaction().rollback();\r\n            }\r\n            throw new RepositorioException(\"Error persisting entity\", e);\r\n        } finally {\r\n            EntityManagerHelper.closeEntityManager();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void update(T entity) throws RepositorioException, EntidadNoEncontrada {\r\n        entityManager = EntityManagerHelper.getEntityManager();\r\n        K persistableEntity = convertToEntidad(entity);\r\n        try {\r\n            entityManager.getTransaction().begin();\r\n\r\n            K existingEntity = getByIdUnclosedEM(entity.getId());\r\n            entityManager.merge(persistableEntity);\r\n\r\n            entityManager.getTransaction().commit();\r\n        } catch (Exception e) {\r\n            if (entityManager.getTransaction().isActive()) {\r\n                entityManager.getTransaction().rollback();\r\n            }\r\n            throw new RepositorioException(\"Error updating entity\", e);\r\n        } finally {\r\n            EntityManagerHelper.closeEntityManager();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void delete(T entity) throws RepositorioException, EntidadNoEncontrada {\r\n        entityManager = EntityManagerHelper.getEntityManager();\r\n        try {\r\n            entityManager.getTransaction().begin();\r\n\r\n            K existingEntity = getByIdUnclosedEM(entity.getId());\r\n            entityManager.remove(existingEntity);\r\n\r\n            entityManager.getTransaction().commit();\r\n        } catch (Exception e) {\r\n            if (entityManager.getTransaction().isActive()) {\r\n                entityManager.getTransaction().rollback();\r\n            }\r\n            throw new RepositorioException(\"Error deleting entity\", e);\r\n        } finally {\r\n            EntityManagerHelper.closeEntityManager();\r\n        }\r\n    }\r\n\r\n    private K getByIdUnclosedEM(String id) throws EntidadNoEncontrada{\r\n        K entity = entityManager.find(getClase(), id);\r\n        if (entity == null) {\r\n            throw new EntidadNoEncontrada(\"La entidad no existe en la base de datos.\");\r\n        }\r\n        return entity;\r\n    }\r\n\r\n    @Override\r\n    public T getById(String id) throws RepositorioException, EntidadNoEncontrada {\r\n        entityManager = EntityManagerHelper.getEntityManager();\r\n        //try {\r\n        K entity = getByIdUnclosedEM(id);\r\n        EntityManagerHelper.closeEntityManager();\r\n        return convertToModel(entity);\r\n        //} catch (Exception e) {\r\n        //throw new RepositorioException(\"Error getting entity by ID\", e);\r\n        //} finally {\r\n       // }\r\n    }\r\n\r\n    @Override\r\n    public List<T> getAll() throws RepositorioException, EntidadNoEncontrada {\r\n        entityManager = EntityManagerHelper.getEntityManager();\r\n        try {\r\n            List<K> entityList = entityManager.createQuery(\"SELECT e FROM \" + getClase().getSimpleName() + \" e\", getClase())\r\n                    .getResultList();\r\n\r\n            List<T> list = new ArrayList<>();\r\n\r\n            for(K entity : entityList){\r\n                list.add(convertToModel(entity));\r\n            }\r\n\r\n            return list;\r\n        } catch (Exception e) {\r\n            throw new RepositorioException(\"Error getting all entities\", e);\r\n        } finally {\r\n            EntityManagerHelper.closeEntityManager();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<String> getIds() throws RepositorioException {\r\n        entityManager = EntityManagerHelper.getEntityManager();\r\n        try {\r\n            return entityManager.createQuery(\"SELECT e.id FROM \" + getClase().getSimpleName() + \" e\", String.class)\r\n                    .getResultList();\r\n        } catch (Exception e) {\r\n            throw new RepositorioException(\"Error getting entity IDs\", e);\r\n        } finally {\r\n            EntityManagerHelper.closeEntityManager();\r\n        }\r\n    }\r\n\r\n    public abstract Class<K> getClase();\r\n    public abstract K convertToEntidad(T entity);\r\n    public abstract T convertToModel(K entity);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/repository/jpa/RepositorioJPA.java b/src/main/java/org/arso/repository/jpa/RepositorioJPA.java
--- a/src/main/java/org/arso/repository/jpa/RepositorioJPA.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/repository/jpa/RepositorioJPA.java	(date 1715157505726)
@@ -1,7 +1,7 @@
 package org.arso.repository.jpa;
 
 import org.arso.interfaces.IIdentificable;
-import org.arso.interfaces.repository.IRepositorioString;
+import org.arso.interfaces.IRepositorioString;
 import org.arso.repository.EntidadNoEncontrada;
 import org.arso.repository.RepositorioException;
 import org.arso.utils.EntityManagerHelper;
Index: src/main/java/org/arso/model/DTO/UsuarioResumenDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/model/DTO/UsuarioResumenDTO.java b/src/main/java/org/arso/model/DTO/UsuarioResumenDTO.java
new file mode 100644
--- /dev/null	(date 1715159842038)
+++ b/src/main/java/org/arso/model/DTO/UsuarioResumenDTO.java	(date 1715159842038)
@@ -0,0 +1,63 @@
+package org.arso.model.DTO;
+
+import org.arso.model.Alquiler;
+import org.arso.model.Reserva;
+
+import java.util.List;
+
+public class UsuarioResumenDTO {
+    private List<Reserva> reservas;
+    private List<Alquiler> alquileres;
+    private boolean bloqueado;
+    private long tiempoUsoHoy;
+    private long tiempoUsoSemanal;
+
+
+    public UsuarioResumenDTO(List<Reserva> reservas, List<Alquiler> alquileres, boolean bloqueado, long tiempoUsoHoy, long tiempoUsoSemanal) {
+        this.reservas = reservas;
+        this.bloqueado = bloqueado;
+        this.alquileres = alquileres;
+        this.tiempoUsoHoy = tiempoUsoHoy;
+        this.tiempoUsoSemanal = tiempoUsoSemanal;
+    }
+
+    public List<Reserva> getReservas() {
+        return reservas;
+    }
+
+    public void setReservas(List<Reserva> reservas) {
+        this.reservas = reservas;
+    }
+
+    public List<Alquiler> getAlquileres() {
+        return alquileres;
+    }
+
+    public void setAlquileres(List<Alquiler> alquileres) {
+        this.alquileres = alquileres;
+    }
+
+    public boolean isBloqueado() {
+        return bloqueado;
+    }
+
+    public void setBloqueado(boolean bloqueado) {
+        this.bloqueado = bloqueado;
+    }
+
+    public long getTiempoUsoHoy() {
+        return tiempoUsoHoy;
+    }
+
+    public void setTiempoUsoHoy(long tiempoUsoHoy) {
+        this.tiempoUsoHoy = tiempoUsoHoy;
+    }
+
+    public long getTiempoUsoSemanal() {
+        return tiempoUsoSemanal;
+    }
+
+    public void setTiempoUsoSemanal(long tiempoUsoSemanal) {
+        this.tiempoUsoSemanal = tiempoUsoSemanal;
+    }
+}
Index: src/main/java/org/arso/interfaces/repository/IRepositorioString.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/interfaces/repository/IRepositorioString.java b/src/main/java/org/arso/interfaces/IRepositorioString.java
rename from src/main/java/org/arso/interfaces/repository/IRepositorioString.java
rename to src/main/java/org/arso/interfaces/IRepositorioString.java
--- a/src/main/java/org/arso/interfaces/repository/IRepositorioString.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/interfaces/IRepositorioString.java	(date 1715157505771)
@@ -1,4 +1,4 @@
-package org.arso.interfaces.repository;
+package org.arso.interfaces;
 
 public interface IRepositorioString<T> extends IRepositorio<String, T>{
 
Index: src/main/java/org/arso/interfaces/repository/IRepositorio.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/interfaces/repository/IRepositorio.java b/src/main/java/org/arso/interfaces/IRepositorio.java
rename from src/main/java/org/arso/interfaces/repository/IRepositorio.java
rename to src/main/java/org/arso/interfaces/IRepositorio.java
--- a/src/main/java/org/arso/interfaces/repository/IRepositorio.java	(revision e8033849829168a6329c98b83b04dd2e487f280a)
+++ b/src/main/java/org/arso/interfaces/IRepositorio.java	(date 1715157505669)
@@ -1,4 +1,4 @@
-package org.arso.interfaces.repository;
+package org.arso.interfaces;
 
 
 import org.arso.repository.EntidadNoEncontrada;
Index: src/main/java/org/arso/model/Rol.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/arso/model/Rol.java b/src/main/java/org/arso/model/Rol.java
new file mode 100644
--- /dev/null	(date 1715158268810)
+++ b/src/main/java/org/arso/model/Rol.java	(date 1715158268810)
@@ -0,0 +1,6 @@
+package org.arso.model;
+
+public enum Rol {
+    GESTOR,
+    NORMAL
+}
Index: ../estaciones/src/main/java/com/arso/estaciones/config/ExpiredJwtExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../estaciones/src/main/java/com/arso/estaciones/config/ExpiredJwtExceptionHandler.java b/../estaciones/src/main/java/com/arso/estaciones/config/ExpiredJwtExceptionHandler.java
new file mode 100644
--- /dev/null	(date 1715164651458)
+++ b/../estaciones/src/main/java/com/arso/estaciones/config/ExpiredJwtExceptionHandler.java	(date 1715164651458)
@@ -0,0 +1,31 @@
+package com.arso.estaciones.config;
+
+import io.jsonwebtoken.ExpiredJwtException;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ControllerAdvice;
+import org.springframework.web.bind.annotation.ExceptionHandler;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ControllerAdvice
+public class ExpiredJwtExceptionHandler {
+    @ExceptionHandler(ExpiredJwtException.class)
+    @ResponseBody
+    @ResponseStatus(HttpStatus.UNAUTHORIZED)
+    public RespuestaError handleExpiredJwtException(ExpiredJwtException ex) {
+        return new RespuestaError("Unauthorized", ex.getMessage());
+    }
+
+    @Data
+    @Builder
+    @AllArgsConstructor
+    @NoArgsConstructor
+    private static class RespuestaError{
+        private String estado;
+        private String mensaje;
+    }
+}
